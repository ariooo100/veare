{"version":3,"sources":["template.js","custom-elements.min.js","shadydom.min.js","shadycss.min.js"],"names":[],"mappingsjSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACj9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"webcomponents.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n// minimal template polyfill\n(function() {\n\n  var needsTemplate = (typeof HTMLTemplateElement === 'undefined');\n\n  // NOTE: Patch document.importNode to work around IE11 bug that\n  // casues children of a document fragment imported while\n  // there is a mutation observer to not have a parentNode (!?!)\n  // It's important that this is the first patch to `importNode` so that\n  // dom produced for later patches is correct.\n  if (/Trident/.test(navigator.userAgent)) {\n    (function() {\n      var Native_importNode = Document.prototype.importNode;\n      Document.prototype.importNode = function() {\n        var n = Native_importNode.apply(this, arguments);\n        // Copy all children to a new document fragment since\n        // this one may be broken\n        if (n.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          var f = this.createDocumentFragment();\n          f.appendChild(n);\n          return f;\n        } else {\n          return n;\n        }\n      };\n    })();\n  }\n\n  // NOTE: we rely on this cloneNode not causing element upgrade.\n  // This means this polyfill must load before the CE polyfill and\n  // this would need to be re-worked if a browser supports native CE\n  // but not <template>.\n  var Native_cloneNode = Node.prototype.cloneNode;\n  var Native_createElement = Document.prototype.createElement;\n  var Native_importNode = Document.prototype.importNode;\n\n  // returns true if nested templates cannot be cloned (they cannot be on\n  // some impl's like Safari 8 and Edge)\n  // OR if cloning a document fragment does not result in a document fragment\n  var needsCloning = (function() {\n    if (!needsTemplate) {\n      var t = document.createElement('template');\n      var t2 = document.createElement('template');\n      t2.content.appendChild(document.createElement('div'));\n      t.content.appendChild(t2);\n      var clone = t.cloneNode(true);\n      return (clone.content.childNodes.length === 0 || clone.content.firstChild.content.childNodes.length === 0\n        || !(document.createDocumentFragment().cloneNode() instanceof DocumentFragment));\n    }\n  })();\n\n  var TEMPLATE_TAG = 'template';\n  var PolyfilledHTMLTemplateElement = function() {};\n\n  if (needsTemplate) {\n\n    var contentDoc = document.implementation.createHTMLDocument('template');\n    var canDecorate = true;\n\n    var templateStyle = document.createElement('style');\n    templateStyle.textContent = TEMPLATE_TAG + '{display:none;}';\n\n    var head = document.head;\n    head.insertBefore(templateStyle, head.firstElementChild);\n\n    /**\n      Provides a minimal shim for the <template> element.\n    */\n    PolyfilledHTMLTemplateElement.prototype = Object.create(HTMLElement.prototype);\n\n\n    // if elements do not have `innerHTML` on instances, then\n    // templates can be patched by swizzling their prototypes.\n    var canProtoPatch =\n      !(document.createElement('div').hasOwnProperty('innerHTML'));\n\n    /**\n      The `decorate` method moves element children to the template's `content`.\n      NOTE: there is no support for dynamically adding elements to templates.\n    */\n    PolyfilledHTMLTemplateElement.decorate = function(template) {\n      // if the template is decorated, return fast\n      if (template.content) {\n        return;\n      }\n      template.content = contentDoc.createDocumentFragment();\n      var child;\n      while (child = template.firstChild) {\n        template.content.appendChild(child);\n      }\n      // NOTE: prefer prototype patching for performance and\n      // because on some browsers (IE11), re-defining `innerHTML`\n      // can result in intermittent errors.\n      if (canProtoPatch) {\n        template.__proto__ = PolyfilledHTMLTemplateElement.prototype;\n      } else {\n        template.cloneNode = function(deep) {\n          return PolyfilledHTMLTemplateElement._cloneNode(this, deep);\n        };\n        // add innerHTML to template, if possible\n        // Note: this throws on Safari 7\n        if (canDecorate) {\n          try {\n            defineInnerHTML(template);\n          } catch (err) {\n            canDecorate = false;\n          }\n        }\n      }\n      // bootstrap recursively\n      PolyfilledHTMLTemplateElement.bootstrap(template.content);\n    };\n\n    function defineInnerHTML(obj) {\n      Object.defineProperty(obj, 'innerHTML', {\n        get: function() {\n          var o = '';\n          for (var e = this.content.firstChild; e; e = e.nextSibling) {\n            o += e.outerHTML || escapeData(e.data);\n          }\n          return o;\n        },\n        set: function(text) {\n          contentDoc.body.innerHTML = text;\n          PolyfilledHTMLTemplateElement.bootstrap(contentDoc);\n          while (this.content.firstChild) {\n            this.content.removeChild(this.content.firstChild);\n          }\n          while (contentDoc.body.firstChild) {\n            this.content.appendChild(contentDoc.body.firstChild);\n          }\n        },\n        configurable: true\n      });\n    }\n\n    defineInnerHTML(PolyfilledHTMLTemplateElement.prototype);\n\n    /**\n      The `bootstrap` method is called automatically and \"fixes\" all\n      <template> elements in the document referenced by the `doc` argument.\n    */\n    PolyfilledHTMLTemplateElement.bootstrap = function(doc) {\n      var templates = doc.querySelectorAll(TEMPLATE_TAG);\n      for (var i=0, l=templates.length, t; (i<l) && (t=templates[i]); i++) {\n        PolyfilledHTMLTemplateElement.decorate(t);\n      }\n    };\n\n    // auto-bootstrapping for main document\n    document.addEventListener('DOMContentLoaded', function() {\n      PolyfilledHTMLTemplateElement.bootstrap(document);\n    });\n\n    // Patch document.createElement to ensure newly created templates have content\n    Document.prototype.createElement = function() {\n      'use strict';\n      var el = Native_createElement.apply(this, arguments);\n      if (el.localName === 'template') {\n        PolyfilledHTMLTemplateElement.decorate(el);\n      }\n      return el;\n    };\n\n    var escapeDataRegExp = /[&\\u00A0<>]/g;\n\n    function escapeReplace(c) {\n      switch (c) {\n        case '&':\n          return '&amp;';\n        case '<':\n          return '&lt;';\n        case '>':\n          return '&gt;';\n        case '\\u00A0':\n          return '&nbsp;';\n      }\n    }\n\n    function escapeData(s) {\n      return s.replace(escapeDataRegExp, escapeReplace);\n    }\n  }\n\n  // make cloning/importing work!\n  if (needsTemplate || needsCloning) {\n\n    PolyfilledHTMLTemplateElement._cloneNode = function(template, deep) {\n      var clone = Native_cloneNode.call(template, false);\n      // NOTE: decorate doesn't auto-fix children because they are already\n      // decorated so they need special clone fixup.\n      if (this.decorate) {\n        this.decorate(clone);\n      }\n      if (deep) {\n        // NOTE: use native clone node to make sure CE's wrapped\n        // cloneNode does not cause elements to upgrade.\n        clone.content.appendChild(\n            Native_cloneNode.call(template.content, true));\n        // now ensure nested templates are cloned correctly.\n        this.fixClonedDom(clone.content, template.content);\n      }\n      return clone;\n    };\n\n    PolyfilledHTMLTemplateElement.prototype.cloneNode = function(deep) {\n      return PolyfilledHTMLTemplateElement._cloneNode(this, deep);\n    }\n\n    // Given a source and cloned subtree, find <template>'s in the cloned\n    // subtree and replace them with cloned <template>'s from source.\n    // We must do this because only the source templates have proper .content.\n    PolyfilledHTMLTemplateElement.fixClonedDom = function(clone, source) {\n      // do nothing if cloned node is not an element\n      if (!source.querySelectorAll) return;\n      // these two lists should be coincident\n      var s$ = source.querySelectorAll(TEMPLATE_TAG);\n      var t$ = clone.querySelectorAll(TEMPLATE_TAG);\n      for (var i=0, l=t$.length, t, s; i<l; i++) {\n        s = s$[i];\n        t = t$[i];\n        if (this.decorate) {\n          this.decorate(s);\n        }\n        t.parentNode.replaceChild(s.cloneNode(true), t);\n      }\n    };\n\n    // override all cloning to fix the cloned subtree to contain properly\n    // cloned templates.\n    Node.prototype.cloneNode = function(deep) {\n      var dom;\n      // workaround for Edge bug cloning documentFragments\n      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8619646/\n      if (this instanceof DocumentFragment) {\n        if (!deep) {\n          return this.ownerDocument.createDocumentFragment();\n        } else {\n          dom = this.ownerDocument.importNode(this, true);\n        }\n      } else {\n        dom = Native_cloneNode.call(this, deep);\n      }\n      // template.content is cloned iff `deep`.\n      if (deep) {\n        PolyfilledHTMLTemplateElement.fixClonedDom(dom, this);\n      }\n      return dom;\n    };\n\n    // NOTE: we are cloning instead of importing <template>'s.\n    // However, the ownerDocument of the cloned template will be correct!\n    // This is because the native import node creates the right document owned\n    // subtree and `fixClonedDom` inserts cloned templates into this subtree,\n    // thus updating the owner doc.\n    Document.prototype.importNode = function(element, deep) {\n      if (element.localName === TEMPLATE_TAG) {\n        return PolyfilledHTMLTemplateElement._cloneNode(element, deep);\n      } else {\n        var dom = Native_importNode.call(this, element, deep);\n        if (deep) {\n          PolyfilledHTMLTemplateElement.fixClonedDom(dom, element);\n        }\n        return dom;\n      }\n    };\n\n    if (needsCloning) {\n      window.HTMLTemplateElement.prototype.cloneNode = function(deep) {\n        return PolyfilledHTMLTemplateElement._cloneNode(this, deep);\n      };\n    }\n  }\n\n  if (needsTemplate) {\n    window.HTMLTemplateElement = PolyfilledHTMLTemplateElement;\n  }\n\n})();\n","/*\n\n Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n Code distributed by Google as part of the polymer project is also\n subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n'use strict';(function(){function c(){function a(){b.C=!0;b.b(f.childNodes)}var b=this;this.a=new Map;this.j=new Map;this.h=new Map;this.m=new Set;this.v=new MutationObserver(this.A.bind(this));this.f=null;this.B=new Set;this.enableFlush=!0;this.C=!1;this.G=this.c(f);window.HTMLImports?window.HTMLImports.whenReady(a):a()}function g(){return h.customElements}function k(a){if(!/^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(a)||-1!==q.indexOf(a))return Error(\"The element name '\"+a+\"' is not valid.\")}function l(a,\nb,d,e){var c=g();a=r.call(a,b,d);(b=c.a.get(b.toLowerCase()))&&c.D(a,b,e);c.c(a);return a}function m(a,b,d,e){b=b.toLowerCase();var c=a.getAttribute(b);e.call(a,b,d);1==a.__$CE_upgraded&&(e=g().a.get(a.localName),d=e.w,(e=e.i)&&0<=d.indexOf(b)&&(d=a.getAttribute(b),d!==c&&e.call(a,b,c,d,null)))}var f=document,h=window;if(g()&&(g().g=function(){},!g().forcePolyfill))return;var q=\"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph\".split(\" \");\nc.prototype.K=function(a,b){function d(a){var b=g[a];if(void 0!==b&&\"function\"!==typeof b)throw Error(c+\" '\"+a+\"' is not a Function\");return b}if(\"function\"!==typeof b)throw new TypeError(\"constructor must be a Constructor\");var e=k(a);if(e)throw e;if(this.a.has(a))throw Error(\"An element with name '\"+a+\"' is already defined\");if(this.j.has(b))throw Error(\"Definition failed for '\"+a+\"': The constructor is already used.\");var c=a,g=b.prototype;if(\"object\"!==typeof g)throw new TypeError(\"Definition failed for '\"+\na+\"': constructor.prototype must be an object\");var e=d(\"connectedCallback\"),h=d(\"disconnectedCallback\"),n=d(\"attributeChangedCallback\");this.a.set(c,{name:a,localName:c,constructor:b,o:e,s:h,i:n,w:n&&b.observedAttributes||[]});this.j.set(b,c);this.C&&this.b(f.childNodes);if(a=this.h.get(c))a.resolve(void 0),this.h.delete(c)};c.prototype.get=function(a){return(a=this.a.get(a))?a.constructor:void 0};c.prototype.L=function(a){var b=k(a);if(b)return Promise.reject(b);if(this.a.has(a))return Promise.resolve();\nif(b=this.h.get(a))return b.M;var d,e=new Promise(function(a){d=a}),b={M:e,resolve:d};this.h.set(a,b);return e};c.prototype.g=function(){this.enableFlush&&(this.l(this.G.takeRecords()),this.A(this.v.takeRecords()),this.m.forEach(function(a){this.l(a.takeRecords())},this))};c.prototype.I=function(a){this.f=a};c.prototype.c=function(a){if(null!=a.__$CE_observer)return a.__$CE_observer;a.__$CE_observer=new MutationObserver(this.l.bind(this));a.__$CE_observer.observe(a,{childList:!0,subtree:!0});this.enableFlush&&\nthis.m.add(a.__$CE_observer);return a.__$CE_observer};c.prototype.J=function(a){null!=a.__$CE_observer&&(a.__$CE_observer.disconnect(),this.enableFlush&&this.m.delete(a.__$CE_observer),a.__$CE_observer=null)};c.prototype.l=function(a){for(var b=0;b<a.length;b++){var d=a[b];if(\"childList\"===d.type){var e=d.removedNodes;this.b(d.addedNodes);this.H(e)}}};c.prototype.b=function(a,b){b=b||new Set;for(var d=0;d<a.length;d++){var e=a[d];if(e.nodeType===Node.ELEMENT_NODE){this.J(e);e=f.createTreeWalker(e,\nNodeFilter.SHOW_ELEMENT,null,!1);do this.F(e.currentNode,b);while(e.nextNode())}}};c.prototype.F=function(a,b){if(!b.has(a)){b.add(a);var d=this.a.get(a.localName);if(d){a.__$CE_upgraded||this.D(a,d,!0);var e;if(e=a.__$CE_upgraded&&!a.__$CE_attached)a:{e=a;do{if(e.__$CE_attached||e.nodeType===Node.DOCUMENT_NODE){e=!0;break a}e=e.parentNode||e.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&e.host}while(e);e=!1}e&&(a.__$CE_attached=!0,d.o&&d.o.call(a))}a.shadowRoot&&this.b(a.shadowRoot.childNodes,b);\"LINK\"===\na.tagName&&a.rel&&-1!==a.rel.toLowerCase().split(\" \").indexOf(\"import\")&&this.u(a,b)}};c.prototype.u=function(a,b){var d=a.import;if(d)b.has(d)||(b.add(d),d.__$CE_observer||this.c(d),this.b(d.childNodes,b));else if(b=a.href,!this.B.has(b)){this.B.add(b);var e=this,c=function(){a.removeEventListener(\"load\",c);a.import.__$CE_observer||e.c(a.import);e.b(a.import.childNodes)};a.addEventListener(\"load\",c)}};c.prototype.H=function(a){for(var b=0;b<a.length;b++){var d=a[b];if(d.nodeType===Node.ELEMENT_NODE){this.c(d);\nd=f.createTreeWalker(d,NodeFilter.SHOW_ELEMENT,null,!1);do{var e=d.currentNode;if(e.__$CE_upgraded&&e.__$CE_attached){e.__$CE_attached=!1;var c=this.a.get(e.localName);c&&c.s&&c.s.call(e)}}while(d.nextNode())}}};c.prototype.D=function(a,b,d){a.__proto__=b.constructor.prototype;d&&(this.I(a),new b.constructor,a.__$CE_upgraded=!0,console.assert(!this.f));d=b.w;if((b=b.i)&&0<d.length){this.v.observe(a,{attributes:!0,attributeOldValue:!0,attributeFilter:d});for(var e=0;e<d.length;e++){var c=d[e];if(a.hasAttribute(c)){var f=\na.getAttribute(c);b.call(a,c,null,f,null)}}}};c.prototype.A=function(a){for(var b=0;b<a.length;b++){var d=a[b];if(\"attributes\"===d.type){var e=d.target,c=this.a.get(e.localName),f=d.attributeName,g=d.oldValue,h=e.getAttribute(f);h!==g&&c.i.call(e,f,g,h,d.attributeNamespace)}}};window.CustomElementRegistry=c;c.prototype.define=c.prototype.K;c.prototype.get=c.prototype.get;c.prototype.whenDefined=c.prototype.L;c.prototype.flush=c.prototype.g;c.prototype.polyfilled=!0;c.prototype._observeRoot=c.prototype.c;\nc.prototype._addImport=c.prototype.u;var t=h.HTMLElement;h.HTMLElement=function(){var a=g();if(a.f){var b=a.f;a.f=null;return b}if(this.constructor)return a=a.j.get(this.constructor),l(f,a,void 0,!1);throw Error(\"Unknown constructor. Did you call customElements.define()?\");};h.HTMLElement.prototype=Object.create(t.prototype,{constructor:{value:h.HTMLElement,configurable:!0,writable:!0}});var r=f.createElement;f.createElement=function(a,b){return l(f,a,b,!0)};var u=f.createElementNS;f.createElementNS=\nfunction(a,b){return\"http://www.w3.org/1999/xhtml\"===a?f.createElement(b):u.call(f,a,b)};var p=Element.prototype.attachShadow;p&&Object.defineProperty(Element.prototype,\"attachShadow\",{value:function(a){a=p.call(this,a);g().c(a);return a}});var v=f.importNode;f.importNode=function(a,b){a=v.call(f,a,b);g().b(a.nodeType===Node.ELEMENT_NODE?[a]:a.childNodes);return a};var w=Element.prototype.setAttribute;Element.prototype.setAttribute=function(a,b){m(this,a,b,w)};var x=Element.prototype.removeAttribute;\nElement.prototype.removeAttribute=function(a){m(this,a,null,x)};Object.defineProperty(window,\"customElements\",{value:new c,configurable:!0,enumerable:!0});window.CustomElements={takeRecords:function(){g().g&&g().g()}}})();\n\n//# sourceMappingURL=custom-elements.min.js.map\n","(function () {\n'use strict';\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nvar settings = window.ShadyDOM || {};\n\nsettings.hasNativeShadowDOM = Boolean(Element.prototype.attachShadow && Node.prototype.getRootNode);\n\nsettings.inUse = settings.force || !settings.hasNativeShadowDOM;\n\nfunction isShadyRoot(obj) {\n  return Boolean(obj.__localName === 'ShadyRoot');\n}\n\nvar p = Element.prototype;\nvar matches = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\nfunction matchesSelector(element, selector) {\n  return matches.call(element, selector);\n}\n\nfunction copyOwnProperty(name, source, target) {\n  var pd = Object.getOwnPropertyDescriptor(source, name);\n  if (pd) {\n    Object.defineProperty(target, name, pd);\n  }\n}\n\nfunction extend(target, source) {\n  if (target && source) {\n    var n$ = Object.getOwnPropertyNames(source);\n    for (var i=0, n; (i<n$.length) && (n=n$[i]); i++) {\n      copyOwnProperty(n, source, target);\n    }\n  }\n  return target || source;\n}\n\nfunction extendAll(target) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  for (var i=0; i < sources.length; i++) {\n    extend(target, sources[i]);\n  }\n  return target;\n}\n\nfunction mixin(target, source) {\n  for (var i in source) {\n    target[i] = source[i];\n  }\n  return target;\n}\n\nvar setPrototypeOf = Object.setPrototypeOf || function(obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n}\n\nfunction patchPrototype(obj, mixin) {\n  var proto = Object.getPrototypeOf(obj);\n  if (!proto.hasOwnProperty('__patchProto')) {\n    var patchProto = Object.create(proto);\n    patchProto.__sourceProto = proto;\n    extend(patchProto, mixin);\n    proto.__patchProto = patchProto;\n  }\n  setPrototypeOf(obj, proto.__patchProto);\n}\n\n\n\nvar common = {};\n\n// TODO(sorvell): actually rely on a real Promise polyfill...\nvar promish;\nif (window.Promise) {\n  promish = Promise.resolve();\n} else {\n  promish = {\n    then: function(cb) {\n      var twiddle = document.createTextNode('');\n      var observer = new MutationObserver(function() {\n        observer.disconnect();\n        cb();\n      });\n      observer.observe(twiddle, {characterData: true});\n    }\n  }\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nvar EDIT_LEAVE = 0;\nvar EDIT_UPDATE = 1;\nvar EDIT_ADD = 2;\nvar EDIT_DELETE = 3;\n\nvar ArraySplice = {\n\n  // Note: This function is *based* on the computation of the Levenshtein\n  // \"edit\" distance. The one change is that \"updates\" are treated as two\n  // edits - not one. With Array splices, an update is really a delete\n  // followed by an add. By retaining this, we optimize for \"keeping\" the\n  // maximum array items in the original array. For example:\n  //\n  //   'xxxx123' -> '123yyyy'\n  //\n  // With 1-edit updates, the shortest path would be just to update all seven\n  // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n  // leaves the substring '123' intact.\n  calcEditDistances: function calcEditDistances(current, currentStart, currentEnd,\n                              old, oldStart, oldEnd) {\n    var this$1 = this;\n\n    // \"Deletion\" columns\n    var rowCount = oldEnd - oldStart + 1;\n    var columnCount = currentEnd - currentStart + 1;\n    var distances = new Array(rowCount);\n\n    // \"Addition\" rows. Initialize null column.\n    for (var i = 0; i < rowCount; i++) {\n      distances[i] = new Array(columnCount);\n      distances[i][0] = i;\n    }\n\n    // Initialize null row\n    for (var j = 0; j < columnCount; j++)\n      distances[0][j] = j;\n\n    for (var i$1 = 1; i$1 < rowCount; i$1++) {\n      for (var j$1 = 1; j$1 < columnCount; j$1++) {\n        if (this$1.equals(current[currentStart + j$1 - 1], old[oldStart + i$1 - 1]))\n          distances[i$1][j$1] = distances[i$1 - 1][j$1 - 1];\n        else {\n          var north = distances[i$1 - 1][j$1] + 1;\n          var west = distances[i$1][j$1 - 1] + 1;\n          distances[i$1][j$1] = north < west ? north : west;\n        }\n      }\n    }\n\n    return distances;\n  },\n\n  // This starts at the final weight, and walks \"backward\" by finding\n  // the minimum previous weight recursively until the origin of the weight\n  // matrix.\n  spliceOperationsFromEditDistances: function spliceOperationsFromEditDistances(distances) {\n    var i = distances.length - 1;\n    var j = distances[0].length - 1;\n    var current = distances[i][j];\n    var edits = [];\n    while (i > 0 || j > 0) {\n      if (i == 0) {\n        edits.push(EDIT_ADD);\n        j--;\n        continue;\n      }\n      if (j == 0) {\n        edits.push(EDIT_DELETE);\n        i--;\n        continue;\n      }\n      var northWest = distances[i - 1][j - 1];\n      var west = distances[i - 1][j];\n      var north = distances[i][j - 1];\n\n      var min;\n      if (west < north)\n        min = west < northWest ? west : northWest;\n      else\n        min = north < northWest ? north : northWest;\n\n      if (min == northWest) {\n        if (northWest == current) {\n          edits.push(EDIT_LEAVE);\n        } else {\n          edits.push(EDIT_UPDATE);\n          current = northWest;\n        }\n        i--;\n        j--;\n      } else if (min == west) {\n        edits.push(EDIT_DELETE);\n        i--;\n        current = west;\n      } else {\n        edits.push(EDIT_ADD);\n        j--;\n        current = north;\n      }\n    }\n\n    edits.reverse();\n    return edits;\n  },\n\n  /**\n   * Splice Projection functions:\n   *\n   * A splice map is a representation of how a previous array of items\n   * was transformed into a new array of items. Conceptually it is a list of\n   * tuples of\n   *\n   *   <index, removed, addedCount>\n   *\n   * which are kept in ascending index order of. The tuple represents that at\n   * the |index|, |removed| sequence of items were removed, and counting forward\n   * from |index|, |addedCount| items were added.\n   */\n\n  /**\n   * Lacking individual splice mutation information, the minimal set of\n   * splices can be synthesized given the previous state and final state of an\n   * array. The basic approach is to calculate the edit distance matrix and\n   * choose the shortest path through it.\n   *\n   * Complexity: O(l * p)\n   *   l: The length of the current array\n   *   p: The length of the old array\n   */\n  calcSplices: function calcSplices(current, currentStart, currentEnd,\n                        old, oldStart, oldEnd) {\n    var prefixCount = 0;\n    var suffixCount = 0;\n    var splice;\n\n    var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n    if (currentStart == 0 && oldStart == 0)\n      prefixCount = this.sharedPrefix(current, old, minLength);\n\n    if (currentEnd == current.length && oldEnd == old.length)\n      suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);\n\n    currentStart += prefixCount;\n    oldStart += prefixCount;\n    currentEnd -= suffixCount;\n    oldEnd -= suffixCount;\n\n    if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n      return [];\n\n    if (currentStart == currentEnd) {\n      splice = newSplice(currentStart, [], 0);\n      while (oldStart < oldEnd)\n        splice.removed.push(old[oldStart++]);\n\n      return [ splice ];\n    } else if (oldStart == oldEnd)\n      return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n    var ops = this.spliceOperationsFromEditDistances(\n        this.calcEditDistances(current, currentStart, currentEnd,\n                               old, oldStart, oldEnd));\n\n    splice = undefined;\n    var splices = [];\n    var index = currentStart;\n    var oldIndex = oldStart;\n    for (var i = 0; i < ops.length; i++) {\n      switch(ops[i]) {\n        case EDIT_LEAVE:\n          if (splice) {\n            splices.push(splice);\n            splice = undefined;\n          }\n\n          index++;\n          oldIndex++;\n          break;\n        case EDIT_UPDATE:\n          if (!splice)\n            splice = newSplice(index, [], 0);\n\n          splice.addedCount++;\n          index++;\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n        case EDIT_ADD:\n          if (!splice)\n            splice = newSplice(index, [], 0);\n\n          splice.addedCount++;\n          index++;\n          break;\n        case EDIT_DELETE:\n          if (!splice)\n            splice = newSplice(index, [], 0);\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n      }\n    }\n\n    if (splice) {\n      splices.push(splice);\n    }\n    return splices;\n  },\n\n  sharedPrefix: function sharedPrefix(current, old, searchLength) {\n    var this$1 = this;\n\n    for (var i = 0; i < searchLength; i++)\n      if (!this$1.equals(current[i], old[i]))\n        return i;\n    return searchLength;\n  },\n\n  sharedSuffix: function sharedSuffix(current, old, searchLength) {\n    var index1 = current.length;\n    var index2 = old.length;\n    var count = 0;\n    while (count < searchLength && this.equals(current[--index1], old[--index2]))\n      count++;\n\n    return count;\n  },\n\n  calculateSplices: function calculateSplices$1(current, previous) {\n    return this.calcSplices(current, 0, current.length, previous, 0,\n                            previous.length);\n  },\n\n  equals: function equals(currentValue, previousValue) {\n    return currentValue === previousValue;\n  }\n\n};\n\nvar calculateSplices = function (current, previous) { return ArraySplice.calculateSplices(current, previous); };\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// TODO(sorvell): circular (patch loads tree and tree loads patch)\n// for now this is stuck on `utils`\n//import {patchNode} from './patch'\n// native add/remove\nvar nativeInsertBefore = Element.prototype.insertBefore;\nvar nativeAppendChild = Element.prototype.appendChild;\nvar nativeRemoveChild = Element.prototype.removeChild;\n\n/**\n * `tree` is a dom manipulation library used by ShadyDom to\n * manipulate composed and logical trees.\n */\nvar tree = {\n\n  // sad but faster than slice...\n  arrayCopyChildNodes: function arrayCopyChildNodes(parent) {\n    var copy=[], i=0;\n    for (var n=parent.firstChild; n; n=n.nextSibling) {\n      copy[i++] = n;\n    }\n    return copy;\n  },\n\n  arrayCopyChildren: function arrayCopyChildren(parent) {\n    var copy=[], i=0;\n    for (var n=parent.firstElementChild; n; n=n.nextElementSibling) {\n      copy[i++] = n;\n    }\n    return copy;\n  },\n\n  arrayCopy: function arrayCopy(a$) {\n    var l = a$.length;\n    var copy = new Array(l);\n    for (var i=0; i < l; i++) {\n      copy[i] = a$[i];\n    }\n    return copy;\n  },\n\n  saveChildNodes: function saveChildNodes(node) {\n    tree.Logical.saveChildNodes(node);\n    if (!tree.Composed.hasParentNode(node)) {\n      tree.Composed.saveComposedData(node);\n      //tree.Composed.saveParentNode(node);\n    }\n    tree.Composed.saveChildNodes(node);\n  }\n\n};\n\ntree.Logical = {\n\n  hasParentNode: function hasParentNode(node) {\n    return Boolean(node.__dom && node.__dom.parentNode);\n  },\n\n  hasChildNodes: function hasChildNodes(node) {\n    return Boolean(node.__dom && node.__dom.childNodes !== undefined);\n  },\n\n  getChildNodes: function getChildNodes(node) {\n    // note: we're distinguishing here between undefined and false-y:\n    // hasChildNodes uses undefined check to see if this element has logical\n    // children; the false-y check indicates whether or not we should rebuild\n    // the cached childNodes array.\n    return this.hasChildNodes(node) ? this._getChildNodes(node) :\n      tree.Composed.getChildNodes(node);\n  },\n\n  _getChildNodes: function _getChildNodes(node) {\n    if (!node.__dom.childNodes) {\n      node.__dom.childNodes = [];\n      for (var n=this.getFirstChild(node); n; n=this.getNextSibling(n)) {\n        node.__dom.childNodes.push(n);\n      }\n    }\n    return node.__dom.childNodes;\n  },\n\n  // NOTE: __dom can be created under 2 conditions: (1) an element has a\n  // logical tree, or (2) an element is in a logical tree. In case (1), the\n  // element will store firstChild/lastChild, and in case (2), the element\n  // will store parentNode, nextSibling, previousSibling. This means that\n  // the mere existence of __dom is not enough to know if the requested\n  // logical data is available and instead we do an explicit undefined check.\n  getParentNode: function getParentNode(node) {\n    return node.__dom && node.__dom.parentNode !== undefined ?\n      node.__dom.parentNode : tree.Composed.getParentNode(node);\n  },\n\n  getFirstChild: function getFirstChild(node) {\n    return node.__dom && node.__dom.firstChild !== undefined ?\n      node.__dom.firstChild : tree.Composed.getFirstChild(node);\n  },\n\n  getLastChild: function getLastChild(node) {\n    return node.__dom && node.__dom.lastChild  !== undefined ?\n      node.__dom.lastChild : tree.Composed.getLastChild(node);\n  },\n\n  getNextSibling: function getNextSibling(node) {\n    return node.__dom && node.__dom.nextSibling  !== undefined ?\n      node.__dom.nextSibling : tree.Composed.getNextSibling(node);\n  },\n\n  getPreviousSibling: function getPreviousSibling(node) {\n    return node.__dom && node.__dom.previousSibling  !== undefined ?\n      node.__dom.previousSibling : tree.Composed.getPreviousSibling(node);\n  },\n\n  getFirstElementChild: function getFirstElementChild(node) {\n    return node.__dom && node.__dom.firstChild !== undefined ?\n      this._getFirstElementChild(node) :\n      tree.Composed.getFirstElementChild(node);\n  },\n\n  _getFirstElementChild: function _getFirstElementChild(node) {\n    var n = node.__dom.firstChild;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = n.__dom.nextSibling;\n    }\n    return n;\n  },\n\n  getLastElementChild: function getLastElementChild(node) {\n    return node.__dom && node.__dom.lastChild !== undefined ?\n      this._getLastElementChild(node) :\n      tree.Composed.getLastElementChild(node);\n  },\n\n  _getLastElementChild: function _getLastElementChild(node) {\n    var n = node.__dom.lastChild;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = n.__dom.previousSibling;\n    }\n    return n;\n  },\n\n  getNextElementSibling: function getNextElementSibling(node) {\n    return node.__dom && node.__dom.nextSibling !== undefined ?\n      this._getNextElementSibling(node) :\n      tree.Composed.getNextElementSibling(node);\n  },\n\n  _getNextElementSibling: function _getNextElementSibling(node) {\n    var this$1 = this;\n\n    var n = node.__dom.nextSibling;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = this$1.getNextSibling(n);\n    }\n    return n;\n  },\n\n  getPreviousElementSibling: function getPreviousElementSibling(node) {\n    return node.__dom && node.__dom.previousSibling !== undefined ?\n      this._getPreviousElementSibling(node) :\n      tree.Composed.getPreviousElementSibling(node);\n  },\n\n  _getPreviousElementSibling: function _getPreviousElementSibling(node) {\n    var this$1 = this;\n\n    var n = node.__dom.previousSibling;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = this$1.getPreviousSibling(n);\n    }\n    return n;\n  },\n\n  // Capture the list of light children. It's important to do this before we\n  // start transforming the DOM into \"rendered\" state.\n  // Children may be added to this list dynamically. It will be treated as the\n  // source of truth for the light children of the element. This element's\n  // actual children will be treated as the rendered state once this function\n  // has been called.\n  saveChildNodes: function saveChildNodes$1(node) {\n    if (!this.hasChildNodes(node)) {\n      node.__dom = node.__dom || {};\n      node.__dom.firstChild = node.firstChild;\n      node.__dom.lastChild = node.lastChild;\n      var c$ = node.__dom.childNodes = tree.arrayCopyChildNodes(node);\n      for (var i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n        n.__dom = n.__dom || {};\n        n.__dom.parentNode = node;\n        n.__dom.nextSibling = c$[i+1] || null;\n        n.__dom.previousSibling = c$[i-1] || null;\n        common.patchNode(n);\n      }\n    }\n  },\n\n  // TODO(sorvell): may need to patch saveChildNodes iff the tree has\n  // already been distributed.\n  // NOTE: ensure `node` is patched...\n  recordInsertBefore: function recordInsertBefore(node, container, ref_node) {\n    var this$1 = this;\n\n    container.__dom.childNodes = null;\n    // handle document fragments\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      var c$ = tree.arrayCopyChildNodes(node);\n      for (var i=0; i < c$.length; i++) {\n        this$1._linkNode(c$[i], container, ref_node);\n      }\n      // cleanup logical dom in doc fragment.\n      node.__dom = node.__dom || {};\n      node.__dom.firstChild = node.__dom.lastChild = null;\n      node.__dom.childNodes = null;\n    } else {\n      this._linkNode(node, container, ref_node);\n    }\n  },\n\n  _linkNode: function _linkNode(node, container, ref_node) {\n    common.patchNode(node);\n    ref_node = ref_node || null;\n    node.__dom = node.__dom || {};\n    container.__dom = container.__dom || {};\n    if (ref_node) {\n      ref_node.__dom = ref_node.__dom || {};\n    }\n    // update ref_node.previousSibling <-> node\n    node.__dom.previousSibling = ref_node ? ref_node.__dom.previousSibling :\n      container.__dom.lastChild;\n    if (node.__dom.previousSibling) {\n      node.__dom.previousSibling.__dom.nextSibling = node;\n    }\n    // update node <-> ref_node\n    node.__dom.nextSibling = ref_node;\n    if (node.__dom.nextSibling) {\n      node.__dom.nextSibling.__dom.previousSibling = node;\n    }\n    // update node <-> container\n    node.__dom.parentNode = container;\n    if (ref_node) {\n      if (ref_node === container.__dom.firstChild) {\n        container.__dom.firstChild = node;\n      }\n    } else {\n      container.__dom.lastChild = node;\n      if (!container.__dom.firstChild) {\n        container.__dom.firstChild = node;\n      }\n    }\n    // remove caching of childNodes\n    container.__dom.childNodes = null;\n  },\n\n  recordRemoveChild: function recordRemoveChild(node, container) {\n    node.__dom = node.__dom || {};\n    container.__dom = container.__dom || {};\n    if (node === container.__dom.firstChild) {\n      container.__dom.firstChild = node.__dom.nextSibling;\n    }\n    if (node === container.__dom.lastChild) {\n      container.__dom.lastChild = node.__dom.previousSibling;\n    }\n    var p = node.__dom.previousSibling;\n    var n = node.__dom.nextSibling;\n    if (p) {\n      p.__dom = p.__dom || {};\n      p.__dom.nextSibling = n;\n    }\n    if (n) {\n      n.__dom = n.__dom || {};\n      n.__dom.previousSibling = p;\n    }\n    // When an element is removed, logical data is no longer tracked.\n    // Explicitly set `undefined` here to indicate this. This is disginguished\n    // from `null` which is set if info is null.\n    node.__dom.parentNode = node.__dom.previousSibling =\n      node.__dom.nextSibling = null;\n    // remove caching of childNodes\n    container.__dom.childNodes = null;\n  }\n\n}\n\n\n// TODO(sorvell): composed tree manipulation is made available\n// (1) to maninpulate the composed tree, and (2) to track changes\n// to the tree for optional patching pluggability.\ntree.Composed = {\n\n  hasParentNode: function hasParentNode$1(node) {\n    return Boolean(node.__dom && node.__dom.$parentNode !== undefined);\n  },\n\n  hasChildNodes: function hasChildNodes$1(node) {\n    return Boolean(node.__dom && node.__dom.$childNodes !== undefined);\n  },\n\n  getChildNodes: function getChildNodes$1(node) {\n    return this.hasChildNodes(node) ? this._getChildNodes(node) :\n      (!node.__patched && tree.arrayCopy(node.childNodes));\n  },\n\n  _getChildNodes: function _getChildNodes$1(node) {\n    if (!node.__dom.$childNodes) {\n      node.__dom.$childNodes = [];\n      for (var n=node.__dom.$firstChild; n; n=n.__dom.$nextSibling) {\n        node.__dom.$childNodes.push(n);\n      }\n    }\n    return node.__dom.$childNodes;\n  },\n\n  getComposedChildNodes: function getComposedChildNodes(node) {\n    return node.__dom.$childNodes;\n  },\n\n  getParentNode: function getParentNode$1(node) {\n    return this.hasParentNode(node) ? node.__dom.$parentNode :\n      (!node.__patched && node.parentNode);\n  },\n\n  getFirstChild: function getFirstChild$1(node) {\n    return node.__patched ? node.__dom.$firstChild : node.firstChild;\n  },\n\n  getLastChild: function getLastChild$1(node) {\n    return node.__patched ? node.__dom.$lastChild : node.lastChild;\n  },\n\n  getNextSibling: function getNextSibling$1(node) {\n    return node.__patched ? node.__dom.$nextSibling : node.nextSibling;\n  },\n\n  getPreviousSibling: function getPreviousSibling$1(node) {\n    return node.__patched ? node.__dom.$previousSibling : node.previousSibling;\n  },\n\n  getFirstElementChild: function getFirstElementChild$1(node) {\n    return node.__patched ? this._getFirstElementChild(node) :\n      node.firstElementChild;\n  },\n\n  _getFirstElementChild: function _getFirstElementChild$1(node) {\n    var n = node.__dom.$firstChild;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = n.__dom.$nextSibling;\n    }\n    return n;\n  },\n\n  getLastElementChild: function getLastElementChild$1(node) {\n    return node.__patched ? this._getLastElementChild(node) :\n      node.lastElementChild;\n  },\n\n  _getLastElementChild: function _getLastElementChild$1(node) {\n    var n = node.__dom.$lastChild;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = n.__dom.$previousSibling;\n    }\n    return n;\n  },\n\n  getNextElementSibling: function getNextElementSibling$1(node) {\n    return node.__patched ? this._getNextElementSibling(node) :\n      node.nextElementSibling;\n  },\n\n  _getNextElementSibling: function _getNextElementSibling$1(node) {\n    var this$1 = this;\n\n    var n = node.__dom.$nextSibling;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = this$1.getNextSibling(n);\n    }\n    return n;\n  },\n\n  getPreviousElementSibling: function getPreviousElementSibling$1(node) {\n    return node.__patched ? this._getPreviousElementSibling(node) :\n      node.previousElementSibling;\n  },\n\n  _getPreviousElementSibling: function _getPreviousElementSibling$1(node) {\n    var this$1 = this;\n\n    var n = node.__dom.$previousSibling;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = this$1.getPreviousSibling(n);\n    }\n    return n;\n  },\n\n  saveChildNodes: function saveChildNodes$2(node) {\n    var this$1 = this;\n\n    if (!this.hasChildNodes(node)) {\n      node.__dom = node.__dom || {};\n      node.__dom.$firstChild = node.firstChild;\n      node.__dom.$lastChild = node.lastChild;\n      var c$ = node.__dom.$childNodes = tree.arrayCopyChildNodes(node);\n      for (var i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n        this$1.saveComposedData(n);\n      }\n    }\n  },\n\n  saveComposedData: function saveComposedData(node) {\n    node.__dom = node.__dom || {};\n    if (node.__dom.$parentNode === undefined) {\n      node.__dom.$parentNode = node.parentNode;\n    }\n    if (node.__dom.$nextSibling === undefined) {\n      node.__dom.$nextSibling = node.nextSibling;\n    }\n    if (node.__dom.$previousSibling === undefined) {\n      node.__dom.$previousSibling = node.previousSibling;\n    }\n  },\n\n  recordInsertBefore: function recordInsertBefore$1(node, container, ref_node) {\n    var this$1 = this;\n\n    container.__dom.$childNodes = null;\n    // handle document fragments\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      // TODO(sorvell): remember this for patching:\n      // the act of setting this info can affect patched nodes\n      // getters; therefore capture childNodes before patching.\n      for (var n=this.getFirstChild(node); n; n=this.getNextSibling(n)) {\n        this$1._linkNode(n, container, ref_node);\n      }\n    } else {\n      this._linkNode(node, container, ref_node);\n    }\n  },\n\n  _linkNode: function _linkNode$1(node, container, ref_node) {\n    node.__dom = node.__dom || {};\n    container.__dom = container.__dom || {};\n    if (ref_node) {\n      ref_node.__dom = ref_node.__dom || {};\n    }\n    // update ref_node.previousSibling <-> node\n    node.__dom.$previousSibling = ref_node ? ref_node.__dom.$previousSibling :\n      container.__dom.$lastChild;\n    if (node.__dom.$previousSibling) {\n      node.__dom.$previousSibling.__dom.$nextSibling = node;\n    }\n    // update node <-> ref_node\n    node.__dom.$nextSibling = ref_node;\n    if (node.__dom.$nextSibling) {\n      node.__dom.$nextSibling.__dom.$previousSibling = node;\n    }\n    // update node <-> container\n    node.__dom.$parentNode = container;\n    if (ref_node) {\n      if (ref_node === container.__dom.$firstChild) {\n        container.__dom.$firstChild = node;\n      }\n    } else {\n      container.__dom.$lastChild = node;\n      if (!container.__dom.$firstChild) {\n        container.__dom.$firstChild = node;\n      }\n    }\n    // remove caching of childNodes\n    container.__dom.$childNodes = null;\n  },\n\n  recordRemoveChild: function recordRemoveChild$1(node, container) {\n    node.__dom = node.__dom || {};\n    container.__dom = container.__dom || {};\n    if (node === container.__dom.$firstChild) {\n      container.__dom.$firstChild = node.__dom.$nextSibling;\n    }\n    if (node === container.__dom.$lastChild) {\n      container.__dom.$lastChild = node.__dom.$previousSibling;\n    }\n    var p = node.__dom.$previousSibling;\n    var n = node.__dom.$nextSibling;\n    if (p) {\n      p.__dom = p.__dom || {};\n      p.__dom.$nextSibling = n;\n    }\n    if (n) {\n      n.__dom = n.__dom || {};\n      n.__dom.$previousSibling = p;\n    }\n    node.__dom.$parentNode = node.__dom.$previousSibling =\n      node.__dom.$nextSibling = null;\n    // remove caching of childNodes\n    container.__dom.$childNodes = null;\n  },\n\n  clearChildNodes: function clearChildNodes(node) {\n    var this$1 = this;\n\n    var c$ = this.getChildNodes(node);\n    for (var i=0, c; i < c$.length; i++) {\n      c = c$[i];\n      this$1.recordRemoveChild(c, node);\n      nativeRemoveChild.call(node, c)\n    }\n  },\n\n  saveParentNode: function saveParentNode(node) {\n    node.__dom = node.__dom || {};\n    node.__dom.$parentNode = node.parentNode;\n  },\n\n  insertBefore: function insertBefore(parentNode, newChild, refChild) {\n    this.saveChildNodes(parentNode);\n    // remove from current location.\n    this._addChild(parentNode, newChild, refChild);\n    return nativeInsertBefore.call(parentNode, newChild, refChild || null);\n  },\n\n  appendChild: function appendChild(parentNode, newChild) {\n    this.saveChildNodes(parentNode);\n    this._addChild(parentNode, newChild);\n    return nativeAppendChild.call(parentNode, newChild);\n  },\n\n  removeChild: function removeChild(parentNode, node) {\n    var currentParent = this.getParentNode(node);\n    this.saveChildNodes(parentNode);\n    this._removeChild(parentNode, node);\n    if (currentParent === parentNode) {\n      return nativeRemoveChild.call(parentNode, node);\n    }\n  },\n\n  _addChild: function _addChild(parentNode, newChild, refChild) {\n    var this$1 = this;\n\n    var isFrag = (newChild.nodeType === Node.DOCUMENT_FRAGMENT_NODE);\n    var oldParent = this.getParentNode(newChild);\n    if (oldParent) {\n      this._removeChild(oldParent, newChild);\n    }\n    if (isFrag) {\n      var c$ = this.getChildNodes(newChild);\n      for (var i=0; i < c$.length; i++) {\n        var c = c$[i];\n        // unlink document fragment children\n        this$1._removeChild(newChild, c);\n        this$1.recordInsertBefore(c, parentNode, refChild);\n      }\n    } else {\n      this.recordInsertBefore(newChild, parentNode, refChild);\n    }\n  },\n\n  _removeChild: function _removeChild(parentNode, node) {\n    this.recordRemoveChild(node, parentNode);\n  }\n\n};\n\n// for testing...\nvar descriptors = {};\nfunction getNativeProperty(element, property) {\n  if (!descriptors[property]) {\n    descriptors[property] = Object.getOwnPropertyDescriptor(\n      HTMLElement.prototype, property) ||\n    Object.getOwnPropertyDescriptor(\n      Element.prototype, property) ||\n    Object.getOwnPropertyDescriptor(\n      Node.prototype, property);\n  }\n  return descriptors[property].get.call(element);\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// NOTE: normalize event contruction where necessary (IE11)\nvar NormalizedEvent = typeof Event === 'function' ? Event :\n  function(inType, params) {\n    params = params || {};\n    var e = document.createEvent('Event');\n    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));\n    return e;\n  };\n\nvar Distributor = (function () {\n  function anonymous(root) {\n    this.root = root;\n    this.insertionPointTag = 'slot';\n  }\n\n  anonymous.prototype.getInsertionPoints = function getInsertionPoints () {\n    return this.root.querySelectorAll(this.insertionPointTag);\n  };\n\n  anonymous.prototype.hasInsertionPoint = function hasInsertionPoint () {\n    return Boolean(this.root._insertionPoints &&\n      this.root._insertionPoints.length);\n  };\n\n  anonymous.prototype.isInsertionPoint = function isInsertionPoint (node) {\n    return node.localName && node.localName == this.insertionPointTag;\n  };\n\n  anonymous.prototype.distribute = function distribute () {\n    if (this.hasInsertionPoint()) {\n      return this.distributePool(this.root, this.collectPool());\n    }\n    return [];\n  };\n\n  // Gather the pool of nodes that should be distributed. We will combine\n  // these with the \"content root\" to arrive at the composed tree.\n  anonymous.prototype.collectPool = function collectPool () {\n    return tree.arrayCopy(\n      tree.Logical.getChildNodes(this.root.host));\n  };\n\n  // perform \"logical\" distribution; note, no actual dom is moved here,\n  // instead elements are distributed into storage\n  // array where applicable.\n  anonymous.prototype.distributePool = function distributePool (node, pool) {\n    var this$1 = this;\n\n    var dirtyRoots = [];\n    var p$ = this.root._insertionPoints;\n    for (var i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n      this$1.distributeInsertionPoint(p, pool);\n      // provoke redistribution on insertion point parents\n      // must do this on all candidate hosts since distribution in this\n      // scope invalidates their distribution.\n      // only get logical parent.\n      var parent = tree.Logical.getParentNode(p);\n      if (parent && parent.shadyRoot &&\n          this$1.hasInsertionPoint(parent.shadyRoot)) {\n        dirtyRoots.push(parent.shadyRoot);\n      }\n    }\n    for (var i$1=0; i$1 < pool.length; i$1++) {\n      var p$1 = pool[i$1];\n      if (p$1) {\n        p$1._assignedSlot = undefined;\n        // remove undistributed elements from physical dom.\n        var parent$1 = tree.Composed.getParentNode(p$1);\n        if (parent$1) {\n          tree.Composed.removeChild(parent$1, p$1);\n        }\n      }\n    }\n    return dirtyRoots;\n  };\n\n  anonymous.prototype.distributeInsertionPoint = function distributeInsertionPoint (insertionPoint, pool) {\n    var this$1 = this;\n\n    var prevAssignedNodes = insertionPoint._assignedNodes;\n    if (prevAssignedNodes) {\n      this.clearAssignedSlots(insertionPoint, true);\n    }\n    insertionPoint._assignedNodes = [];\n    var needsSlotChange = false;\n    // distribute nodes from the pool that this selector matches\n    var anyDistributed = false;\n    for (var i=0, l=pool.length, node; i < l; i++) {\n      node=pool[i];\n      // skip nodes that were already used\n      if (!node) {\n        continue;\n      }\n      // distribute this node if it matches\n      if (this$1.matchesInsertionPoint(node, insertionPoint)) {\n        if (node.__prevAssignedSlot != insertionPoint) {\n          needsSlotChange = true;\n        }\n        this$1.distributeNodeInto(node, insertionPoint)\n        // remove this node from the pool\n        pool[i] = undefined;\n        // since at least one node matched, we won't need fallback content\n        anyDistributed = true;\n      }\n    }\n    // Fallback content if nothing was distributed here\n    if (!anyDistributed) {\n      var children = tree.Logical.getChildNodes(insertionPoint);\n      for (var j = 0, node$1; j < children.length; j++) {\n        node$1 = children[j];\n        if (node$1.__prevAssignedSlot != insertionPoint) {\n          needsSlotChange = true;\n        }\n        this$1.distributeNodeInto(node$1, insertionPoint);\n      }\n    }\n    // we're already dirty if a node was newly added to the slot\n    // and we're also dirty if the assigned count decreased.\n    if (prevAssignedNodes) {\n      // TODO(sorvell): the tracking of previously assigned slots\n      // could instead by done with a Set and then we could\n      // avoid needing to iterate here to clear the info.\n      for (var i$1=0; i$1 < prevAssignedNodes.length; i$1++) {\n        prevAssignedNodes[i$1].__prevAssignedSlot = null;\n      }\n      if (insertionPoint._assignedNodes.length < prevAssignedNodes.length) {\n        needsSlotChange = true;\n      }\n    }\n    this.setDistributedNodesOnInsertionPoint(insertionPoint);\n    if (needsSlotChange) {\n      this._fireSlotChange(insertionPoint);\n    }\n  };\n\n  anonymous.prototype.clearAssignedSlots = function clearAssignedSlots (slot, savePrevious) {\n    var n$ = slot._assignedNodes;\n    if (n$) {\n      for (var i=0; i < n$.length; i++) {\n        var n = n$[i];\n        if (savePrevious) {\n          n.__prevAssignedSlot = n._assignedSlot;\n        }\n        // only clear if it was previously set to this slot;\n        // this helps ensure that if the node has otherwise been distributed\n        // ignore it.\n        if (n._assignedSlot === slot) {\n          n._assignedSlot = null;\n        }\n      }\n    }\n  };\n\n  anonymous.prototype.matchesInsertionPoint = function matchesInsertionPoint (node, insertionPoint) {\n    var slotName = insertionPoint.getAttribute('name');\n    slotName = slotName ? slotName.trim() : '';\n    var slot = node.getAttribute && node.getAttribute('slot');\n    slot = slot ? slot.trim() : '';\n    return (slot == slotName);\n  };\n\n  anonymous.prototype.distributeNodeInto = function distributeNodeInto (child, insertionPoint) {\n    insertionPoint._assignedNodes.push(child);\n    child._assignedSlot = insertionPoint;\n  };\n\n  anonymous.prototype.setDistributedNodesOnInsertionPoint = function setDistributedNodesOnInsertionPoint (insertionPoint) {\n    var this$1 = this;\n\n    var n$ = insertionPoint._assignedNodes;\n    insertionPoint._distributedNodes = [];\n    for (var i=0, n; (i<n$.length) && (n=n$[i]) ; i++) {\n      if (this$1.isInsertionPoint(n)) {\n        var d$ = n._distributedNodes;\n        if (d$) {\n          for (var j=0; j < d$.length; j++) {\n            insertionPoint._distributedNodes.push(d$[j]);\n          }\n        }\n      } else {\n        insertionPoint._distributedNodes.push(n$[i]);\n      }\n    }\n  };\n\n  anonymous.prototype._fireSlotChange = function _fireSlotChange (insertionPoint) {\n    // NOTE: cannot bubble correctly here so not setting bubbles: true\n    // Safari tech preview does not bubble but chrome does\n    // Spec says it bubbles (https://dom.spec.whatwg.org/#mutation-observers)\n    insertionPoint.dispatchEvent(new NormalizedEvent('slotchange'));\n    if (insertionPoint._assignedSlot) {\n      this._fireSlotChange(insertionPoint._assignedSlot);\n    }\n  };\n\n  anonymous.prototype.isFinalDestination = function isFinalDestination (insertionPoint) {\n    return !(insertionPoint._assignedSlot);\n  };\n\n  return anonymous;\n}())\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n  Implements a pared down version of ShadowDOM's scoping, which is easy to\n  polyfill across browsers.\n*/\nvar ShadyRoot = function ShadyRoot(host) {\n  if (!host) {\n    throw 'Must provide a host';\n  }\n  // NOTE: this strange construction is necessary because\n  // DocumentFragment cannot be subclassed on older browsers.\n  var frag = document.createDocumentFragment();\n  frag.__proto__ = ShadyFragmentMixin;\n  frag._init(host);\n  return frag;\n};\n\nvar ShadyMixin = {\n\n  _init: function _init(host) {\n    // NOTE: set a fake local name so this element can be\n    // distinguished from a DocumentFragment when patching.\n    // FF doesn't allow this to be `localName`\n    this.__localName = 'ShadyRoot';\n    // root <=> host\n    host.shadyRoot = this;\n    this.host = host;\n    // logical dom setup\n    tree.Logical.saveChildNodes(host);\n    tree.Logical.saveChildNodes(this);\n    // state flags\n    this._clean = true;\n    this._hasRendered = false;\n    this._distributor = new Distributor(this);\n    this.update();\n  },\n\n  // async render the \"top\" distributor (this is all that is needed to\n  // distribute this host).\n  update: function update() {\n    // TODO(sorvell): instead the root should always be enqueued to helps record that it is dirty.\n    // Then, in `render`, the top most (in the distribution tree) \"dirty\" root should be rendered.\n    var distributionRoot = this._findDistributionRoot(this.host);\n    //console.log('update from', this.host, 'root', distributionRoot.host, distributionRoot._clean);\n    if (distributionRoot._clean) {\n      distributionRoot._clean = false;\n      enqueue(function() {\n        distributionRoot.render();\n      });\n    }\n  },\n\n  // TODO(sorvell): this may not return a shadowRoot (for example if the element is in a docFragment)\n  // this should only return a shadowRoot.\n  // returns the host that's the top of this host's distribution tree\n  _findDistributionRoot: function _findDistributionRoot(element) {\n    var root = element.shadyRoot;\n    while (element && this._elementNeedsDistribution(element)) {\n      root = element.getRootNode();\n      element = root && root.host;\n    }\n    return root;\n  },\n\n  // Return true if a host's children includes\n  // an insertion point that selects selectively\n  _elementNeedsDistribution: function _elementNeedsDistribution(element) {\n    var this$1 = this;\n\n    var c$ = tree.Logical.getChildNodes(element);\n    for (var i=0, c; i < c$.length; i++) {\n      c = c$[i];\n      if (this$1._distributor.isInsertionPoint(c)) {\n        return element.getRootNode();\n      }\n    }\n  },\n\n  render: function render() {\n    if (!this._clean) {\n      this._clean = true;\n      if (!this._skipUpdateInsertionPoints) {\n        this.updateInsertionPoints();\n      } else if (!this._hasRendered) {\n        this._insertionPoints = [];\n      }\n      this._skipUpdateInsertionPoints = false;\n      // TODO(sorvell): previous ShadyDom had a fast path here\n      // that would avoid distribution for initial render if\n      // no insertion points exist. We cannot currently do this because\n      // it relies on elements being in the physical shadowRoot element\n      // so that native methods will be used. The current append code\n      // simply provokes distribution in this case and does not put the\n      // nodes in the shadowRoot. This could be done but we'll need to\n      // consider if the special processing is worth the perf gain.\n      // if (!this._hasRendered && !this._insertionPoints.length) {\n      //   tree.Composed.clearChildNodes(this.host);\n      //   tree.Composed.appendChild(this.host, this);\n      // } else {\n      // logical\n      this.distribute();\n      // physical\n      this.compose();\n      this._hasRendered = true;\n    }\n  },\n\n  forceRender: function forceRender() {\n    this._clean = false;\n    this.render();\n  },\n\n  distribute: function distribute() {\n    var dirtyRoots = this._distributor.distribute();\n    for (var i=0; i<dirtyRoots.length; i++) {\n      dirtyRoots[i].forceRender();\n    }\n  },\n\n  updateInsertionPoints: function updateInsertionPoints() {\n    var this$1 = this;\n\n    var i$ = this.__insertionPoints;\n    // if any insertion points have been removed, clear their distribution info\n    if (i$) {\n      for (var i=0, c; i < i$.length; i++) {\n        c = i$[i];\n        if (c.getRootNode() !== this$1) {\n          this$1._distributor.clearAssignedSlots(c);\n        }\n      }\n    }\n    i$ = this._insertionPoints = this._distributor.getInsertionPoints();\n    // ensure insertionPoints's and their parents have logical dom info.\n    // save logical tree info\n    // a. for shadyRoot\n    // b. for insertion points (fallback)\n    // c. for parents of insertion points\n    for (var i$1=0, c$1; i$1 < i$.length; i$1++) {\n      c$1 = i$[i$1];\n      tree.Logical.saveChildNodes(c$1);\n      tree.Logical.saveChildNodes(tree.Logical.getParentNode(c$1));\n    }\n  },\n\n  get _insertionPoints() {\n    if (!this.__insertionPoints) {\n      this.updateInsertionPoints();\n    }\n    return this.__insertionPoints || (this.__insertionPoints = []);\n  },\n\n  set _insertionPoints(insertionPoints) {\n    this.__insertionPoints = insertionPoints;\n  },\n\n  hasInsertionPoint: function hasInsertionPoint() {\n    return this._distributor.hasInsertionPoint();\n  },\n\n  compose: function compose() {\n    // compose self\n    // note: it's important to mark this clean before distribution\n    // so that attachment that provokes additional distribution (e.g.\n    // adding something to your parentNode) works\n    this._composeTree();\n    // TODO(sorvell): See fast paths here in Polymer v1\n    // (these seem unnecessary)\n  },\n\n  // Reify dom such that it is at its correct rendering position\n  // based on logical distribution.\n  _composeTree: function _composeTree() {\n    var this$1 = this;\n\n    this._updateChildNodes(this.host, this._composeNode(this.host));\n    var p$ = this._insertionPoints || [];\n    for (var i=0, l=p$.length, p, parent; (i<l) && (p=p$[i]); i++) {\n      parent = tree.Logical.getParentNode(p);\n      if ((parent !== this$1.host) && (parent !== this$1)) {\n        this$1._updateChildNodes(parent, this$1._composeNode(parent));\n      }\n    }\n  },\n\n  // Returns the list of nodes which should be rendered inside `node`.\n  _composeNode: function _composeNode(node) {\n    var this$1 = this;\n\n    var children = [];\n    var c$ = tree.Logical.getChildNodes(node.shadyRoot || node);\n    for (var i = 0; i < c$.length; i++) {\n      var child = c$[i];\n      if (this$1._distributor.isInsertionPoint(child)) {\n        var distributedNodes = child._distributedNodes ||\n          (child._distributedNodes = []);\n        for (var j = 0; j < distributedNodes.length; j++) {\n          var distributedNode = distributedNodes[j];\n          if (this$1.isFinalDestination(child, distributedNode)) {\n            children.push(distributedNode);\n          }\n        }\n      } else {\n        children.push(child);\n      }\n    }\n    return children;\n  },\n\n  isFinalDestination: function isFinalDestination(insertionPoint, node) {\n    return this._distributor.isFinalDestination(\n      insertionPoint, node);\n  },\n\n  // Ensures that the rendered node list inside `container` is `children`.\n  _updateChildNodes: function _updateChildNodes(container, children) {\n    var composed = tree.Composed.getChildNodes(container);\n    var splices = calculateSplices(children, composed);\n    // process removals\n    for (var i=0, d=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (var j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n        // check if the node is still where we expect it is before trying\n        // to remove it; this can happen if we move a node and\n        // then schedule its previous host for distribution resulting in\n        // the node being removed here.\n        if (tree.Composed.getParentNode(n) === container) {\n          tree.Composed.removeChild(container, n);\n        }\n        composed.splice(s.index + d, 1);\n      }\n      d -= s.addedCount;\n    }\n    // process adds\n    for (var i$1=0, s$1, next; (i$1<splices.length) && (s$1=splices[i$1]); i$1++) { //eslint-disable-line no-redeclare\n      next = composed[s$1.index];\n      for (var j$1=s$1.index, n$1; j$1 < s$1.index + s$1.addedCount; j$1++) {\n        n$1 = children[j$1];\n        tree.Composed.insertBefore(container, n$1, next);\n        // TODO(sorvell): is this splice strictly needed?\n        composed.splice(j$1, 0, n$1);\n      }\n    }\n  },\n\n  getInsertionPointTag: function getInsertionPointTag() {\n    return this._distributor.insertionPointTag;\n  }\n\n}\n\nvar ShadyFragmentMixin = Object.create(DocumentFragment.prototype);\nextend(ShadyFragmentMixin, ShadyMixin);\n\n// let needsUpgrade = window.CustomElements && !CustomElements.useNative;\n\n// function upgradeLogicalChildren(children) {\n//   if (needsUpgrade && children) {\n//     for (let i=0; i < children.length; i++) {\n//       CustomElements.upgrade(children[i]);\n//     }\n//   }\n// }\n\n// render enqueuer/flusher\nvar customElements = window.customElements;\nvar flushList = [];\nvar scheduled;\nvar flushCount = 0;\nvar flushMax = 100;\nfunction enqueue(callback) {\n  if (!scheduled) {\n    scheduled = true;\n    promish.then(flush$1);\n  }\n  flushList.push(callback);\n}\n\nfunction flush$1() {\n  scheduled = false;\n  flushCount++;\n  while (flushList.length) {\n    flushList.shift()();\n  }\n  if (customElements && customElements.flush) {\n    customElements.flush();\n  }\n  // continue flushing after elements are upgraded...\n  var isFlushedMaxed = (flushCount > flushMax);\n  if (flushList.length && !isFlushedMaxed) {\n      flush$1();\n  }\n  flushCount = 0;\n  if (isFlushedMaxed) {\n    throw new Error('Loop detected in ShadyDOM distribution, aborting.')\n  }\n}\n\nflush$1.list = flushList;\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n// Cribbed from ShadowDOM polyfill\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/ShadowDOM/wrappers/HTMLElement.js#L28\n/////////////////////////////////////////////////////////////////////////////\n// innerHTML and outerHTML\n\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#escapingString\nvar escapeAttrRegExp = /[&\\u00A0\"]/g;\nvar escapeDataRegExp = /[&\\u00A0<>]/g;\n\nfunction escapeReplace(c) {\n  switch (c) {\n    case '&':\n      return '&amp;';\n    case '<':\n      return '&lt;';\n    case '>':\n      return '&gt;';\n    case '\"':\n      return '&quot;';\n    case '\\u00A0':\n      return '&nbsp;';\n  }\n}\n\nfunction escapeAttr(s) {\n  return s.replace(escapeAttrRegExp, escapeReplace);\n}\n\nfunction escapeData(s) {\n  return s.replace(escapeDataRegExp, escapeReplace);\n}\n\nfunction makeSet(arr) {\n  var set = {};\n  for (var i = 0; i < arr.length; i++) {\n    set[arr[i]] = true;\n  }\n  return set;\n}\n\n// http://www.whatwg.org/specs/web-apps/current-work/#void-elements\nvar voidElements = makeSet([\n  'area',\n  'base',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]);\n\nvar plaintextParents = makeSet([\n  'style',\n  'script',\n  'xmp',\n  'iframe',\n  'noembed',\n  'noframes',\n  'plaintext',\n  'noscript'\n]);\n\nfunction getOuterHTML(node, parentNode, composed) {\n  switch (node.nodeType) {\n    case Node.ELEMENT_NODE: {\n      var tagName = node.localName;\n      var s = '<' + tagName;\n      var attrs = node.attributes;\n      for (var i = 0, attr; (attr = attrs[i]); i++) {\n        s += ' ' + attr.name + '=\"' + escapeAttr(attr.value) + '\"';\n      }\n      s += '>';\n      if (voidElements[tagName]) {\n        return s;\n      }\n      return s + getInnerHTML(node, composed) + '</' + tagName + '>';\n    }\n    case Node.TEXT_NODE: {\n      var data = node.data;\n      if (parentNode && plaintextParents[parentNode.localName]) {\n        return data;\n      }\n      return escapeData(data);\n    }\n    case Node.COMMENT_NODE: {\n      return '<!--' + node.data + '-->';\n    }\n    default: {\n      window.console.error(node);\n      throw new Error('not implemented');\n    }\n  }\n}\n\nfunction getInnerHTML(node, composed) {\n  if (node.localName === 'template') {\n    node = node.content;\n  }\n  var s = '';\n  var c$ = composed ? composed(node) : node.childNodes;\n  for (var i=0, l=c$.length, child; (i<l) && (child=c$[i]); i++) {\n    s += getOuterHTML(child, node, composed);\n  }\n  return s;\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nvar mixinImpl = {\n\n  // Try to add node. Record logical info, track insertion points, perform\n  // distribution iff needed. Return true if the add is handled.\n  addNode: function addNode(container, node, ref_node) {\n    var ownerRoot = this.ownerShadyRootForNode(container);\n    if (ownerRoot) {\n      // optimization: special insertion point tracking\n      if (node.__noInsertionPoint && ownerRoot._clean) {\n        ownerRoot._skipUpdateInsertionPoints = true;\n      }\n      // note: we always need to see if an insertion point is added\n      // since this saves logical tree info; however, invalidation state\n      // needs\n      var ipAdded = this._maybeAddInsertionPoint(node, container, ownerRoot);\n      // invalidate insertion points IFF not already invalid!\n      if (ipAdded) {\n        ownerRoot._skipUpdateInsertionPoints = false;\n      }\n    }\n    if (tree.Logical.hasChildNodes(container)) {\n      tree.Logical.recordInsertBefore(node, container, ref_node);\n    }\n    // if not distributing and not adding to host, do a fast path addition\n    var handled = this._maybeDistribute(node, container, ownerRoot) ||\n      container.shadyRoot;\n    return handled;\n  },\n\n  // Try to remove node: update logical info and perform distribution iff\n  // needed. Return true if the removal has been handled.\n  // note that it's possible for both the node's host and its parent\n  // to require distribution... both cases are handled here.\n  removeNode: function removeNode(node) {\n    // important that we want to do this only if the node has a logical parent\n    var logicalParent = tree.Logical.hasParentNode(node) &&\n      tree.Logical.getParentNode(node);\n    var distributed;\n    var ownerRoot = this.ownerShadyRootForNode(node);\n    if (logicalParent) {\n      // distribute node's parent iff needed\n      distributed = this.maybeDistributeParent(node);\n      tree.Logical.recordRemoveChild(node, logicalParent);\n      // remove node from root and distribute it iff needed\n      if (ownerRoot && (this._removeDistributedChildren(ownerRoot, node) ||\n        logicalParent.localName === ownerRoot.getInsertionPointTag())) {\n        ownerRoot._skipUpdateInsertionPoints = false;\n        ownerRoot.update();\n      }\n    }\n    this._removeOwnerShadyRoot(node);\n    return distributed;\n  },\n\n\n  _scheduleObserver: function _scheduleObserver(node, addedNode, removedNode) {\n    var observer = node.__dom && node.__dom.observer;\n    if (observer) {\n      if (addedNode) {\n        observer.addedNodes.push(addedNode);\n      }\n      if (removedNode) {\n        observer.removedNodes.push(removedNode);\n      }\n      observer.schedule();\n    }\n  },\n\n  removeNodeFromParent: function removeNodeFromParent(node, parent) {\n    if (parent) {\n      this._scheduleObserver(parent, null, node);\n      this.removeNode(node);\n    } else {\n      this._removeOwnerShadyRoot(node);\n    }\n  },\n\n  _hasCachedOwnerRoot: function _hasCachedOwnerRoot(node) {\n    return Boolean(node.__ownerShadyRoot !== undefined);\n  },\n\n  getRootNode: function getRootNode$1(node) {\n    if (!node || !node.nodeType) {\n      return;\n    }\n    var root = node.__ownerShadyRoot;\n    if (root === undefined) {\n      if (isShadyRoot(node)) {\n        root = node;\n      } else {\n        var parent = tree.Logical.getParentNode(node);\n        root = parent ? this.getRootNode(parent) : node;\n      }\n      // memo-ize result for performance but only memo-ize\n      // result if node is in the document. This avoids a problem where a root\n      // can be cached while an element is inside a fragment.\n      // If this happens and we cache the result, the value can become stale\n      // because for perf we avoid processing the subtree of added fragments.\n      if (document.documentElement.contains(node)) {\n        node.__ownerShadyRoot = root;\n      }\n    }\n    return root;\n  },\n\n  ownerShadyRootForNode: function ownerShadyRootForNode(node) {\n    var root = this.getRootNode(node);\n    if (isShadyRoot(root)) {\n      return root;\n    }\n  },\n\n  _maybeDistribute: function _maybeDistribute(node, container, ownerRoot) {\n    // TODO(sorvell): technically we should check non-fragment nodes for\n    // <content> children but since this case is assumed to be exceedingly\n    // rare, we avoid the cost and will address with some specific api\n    // when the need arises.  For now, the user must call\n    // distributeContent(true), which updates insertion points manually\n    // and forces distribution.\n    var insertionPointTag = ownerRoot && ownerRoot.getInsertionPointTag() || '';\n    var fragContent = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) &&\n      !node.__noInsertionPoint &&\n      insertionPointTag && node.querySelector(insertionPointTag);\n    var wrappedContent = fragContent &&\n      (tree.Logical.getParentNode(fragContent).nodeType !==\n      Node.DOCUMENT_FRAGMENT_NODE);\n    var hasContent = fragContent || (node.localName === insertionPointTag);\n    // There are 3 possible cases where a distribution may need to occur:\n    // 1. <content> being inserted (the host of the shady root where\n    //    content is inserted needs distribution)\n    // 2. children being inserted into parent with a shady root (parent\n    //    needs distribution)\n    // 3. container is an insertionPoint\n    if (hasContent || (container.localName === insertionPointTag)) {\n      if (ownerRoot) {\n        // note, insertion point list update is handled after node\n        // mutations are complete\n        ownerRoot.update();\n      }\n    }\n    var needsDist = this._nodeNeedsDistribution(container);\n    if (needsDist) {\n      container.shadyRoot.update();\n    }\n    // Return true when distribution will fully handle the composition\n    // Note that if a content was being inserted that was wrapped by a node,\n    // and the parent does not need distribution, return false to allow\n    // the nodes to be added directly, after which children may be\n    // distributed and composed into the wrapping node(s)\n    return needsDist || (hasContent && !wrappedContent);\n  },\n\n  /* note: parent argument is required since node may have an out\n  of date parent at this point; returns true if a <content> is being added */\n  _maybeAddInsertionPoint: function _maybeAddInsertionPoint(node, parent, root) {\n    var this$1 = this;\n\n    var added;\n    var insertionPointTag = root.getInsertionPointTag();\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE &&\n      !node.__noInsertionPoint) {\n      var c$ = node.querySelectorAll(insertionPointTag);\n      for (var i=0, n, np, na; (i<c$.length) && (n=c$[i]); i++) {\n        np = tree.Logical.getParentNode(n);\n        // don't allow node's parent to be fragment itself\n        if (np === node) {\n          np = parent;\n        }\n        na = this$1._maybeAddInsertionPoint(n, np, root);\n        added = added || na;\n      }\n    } else if (node.localName === insertionPointTag) {\n      tree.Logical.saveChildNodes(parent);\n      tree.Logical.saveChildNodes(node);\n      added = true;\n    }\n    return added;\n  },\n\n  _nodeNeedsDistribution: function _nodeNeedsDistribution(node) {\n    return node && node.shadyRoot &&\n      node.shadyRoot.hasInsertionPoint();\n  },\n\n  _removeDistributedChildren: function _removeDistributedChildren(root, container) {\n    var this$1 = this;\n\n    var hostNeedsDist;\n    var ip$ = root._insertionPoints;\n    for (var i=0; i<ip$.length; i++) {\n      var insertionPoint = ip$[i];\n      if (this$1._contains(container, insertionPoint)) {\n        var dc$ = insertionPoint.assignedNodes({flatten: true});\n        for (var j=0; j<dc$.length; j++) {\n          hostNeedsDist = true;\n          var node = dc$[j];\n          var parent = tree.Composed.getParentNode(node);\n          if (parent) {\n            tree.Composed.removeChild(parent, node);\n          }\n        }\n      }\n    }\n    return hostNeedsDist;\n  },\n\n  _contains: function _contains(container, node) {\n    while (node) {\n      if (node == container) {\n        return true;\n      }\n      node = tree.Logical.getParentNode(node);\n    }\n  },\n\n  _removeOwnerShadyRoot: function _removeOwnerShadyRoot(node) {\n    var this$1 = this;\n\n    // optimization: only reset the tree if node is actually in a root\n    if (this._hasCachedOwnerRoot(node)) {\n      var c$ = tree.Logical.getChildNodes(node);\n      for (var i=0, l=c$.length, n; (i<l) && (n=c$[i]); i++) {\n        this$1._removeOwnerShadyRoot(n);\n      }\n    }\n    node.__ownerShadyRoot = undefined;\n  },\n\n  // TODO(sorvell): This will fail if distribution that affects this\n  // question is pending; this is expected to be exceedingly rare, but if\n  // the issue comes up, we can force a flush in this case.\n  firstComposedNode: function firstComposedNode(insertionPoint) {\n    var n$ = insertionPoint.assignedNodes({flatten: true});\n    var root = this.getRootNode(insertionPoint);\n    for (var i=0, l=n$.length, n; (i<l) && (n=n$[i]); i++) {\n      // means that we're composed to this spot.\n      if (root.isFinalDestination(insertionPoint, n)) {\n        return n;\n      }\n    }\n  },\n\n  clearNode: function clearNode(node) {\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n  },\n\n  maybeDistributeParent: function maybeDistributeParent(node) {\n    var parent = tree.Logical.getParentNode(node);\n    if (this._nodeNeedsDistribution(parent)) {\n      parent.shadyRoot.update();\n      return true;\n    }\n  },\n\n  maybeDistributeAttributeChange: function maybeDistributeAttributeChange(node, name) {\n    if (name === 'slot') {\n      this.maybeDistributeParent(node);\n    } else if (node.localName === 'slot' && name === 'name') {\n      var root = this.ownerShadyRootForNode(node);\n      if (root) {\n        root.update();\n      }\n    }\n  },\n\n  // NOTE: `query` is used primarily for ShadyDOM's querySelector impl,\n  // but it's also generally useful to recurse through the element tree\n  // and is used by Polymer's styling system.\n  query: function query(node, matcher, halter) {\n    var list = [];\n    this._queryElements(tree.Logical.getChildNodes(node), matcher,\n      halter, list);\n    return list;\n  },\n\n  _queryElements: function _queryElements(elements, matcher, halter, list) {\n    var this$1 = this;\n\n    for (var i=0, l=elements.length, c; (i<l) && (c=elements[i]); i++) {\n      if (c.nodeType === Node.ELEMENT_NODE &&\n          this$1._queryElement(c, matcher, halter, list)) {\n        return true;\n      }\n    }\n  },\n\n  _queryElement: function _queryElement(node, matcher, halter, list) {\n    var result = matcher(node);\n    if (result) {\n      list.push(node);\n    }\n    if (halter && halter(result)) {\n      return result;\n    }\n    this._queryElements(tree.Logical.getChildNodes(node), matcher,\n      halter, list);\n  },\n\n  activeElementForNode: function activeElementForNode(node) {\n    var this$1 = this;\n\n    var active = document.activeElement;\n    if (!active) {\n      return null;\n    }\n    var isShadyRoot$$1 = !!(isShadyRoot(node));\n    if (node !== document) {\n      // If this node isn't a document or shady root, then it doesn't have\n      // an active element.\n      if (!isShadyRoot$$1) {\n        return null;\n      }\n      // If this shady root's host is the active element or the active\n      // element is not a descendant of the host (in the composed tree),\n      // then it doesn't have an active element.\n      if (node.host === active ||\n          !node.host.contains(active)) {\n        return null;\n      }\n    }\n    // This node is either the document or a shady root of which the active\n    // element is a (composed) descendant of its host; iterate upwards to\n    // find the active element's most shallow host within it.\n    var activeRoot = this.ownerShadyRootForNode(active);\n    while (activeRoot && activeRoot !== node) {\n      active = activeRoot.host;\n      activeRoot = this$1.ownerShadyRootForNode(active);\n    }\n    if (node === document) {\n      // This node is the document, so activeRoot should be null.\n      return activeRoot ? null : active;\n    } else {\n      // This node is a non-document shady root, and it should be\n      // activeRoot.\n      return activeRoot === node ? active : null;\n    }\n  }\n\n};\n\nvar nativeCloneNode = Element.prototype.cloneNode;\nvar nativeImportNode = Document.prototype.importNode;\nvar nativeSetAttribute$1 = Element.prototype.setAttribute;\nvar nativeRemoveAttribute = Element.prototype.removeAttribute;\n\nvar setAttribute = function(attr, value) {\n  // avoid scoping elements in non-main document to avoid template documents\n  if (window.ShadyCSS && attr === 'class' && this.ownerDocument === document) {\n    window.ShadyCSS.setElementClass(this, value);\n  } else {\n    nativeSetAttribute$1.call(this, attr, value);\n  }\n}\n\nvar NodeMixin = {};\n\nObject.defineProperties(NodeMixin, {\n\n  parentElement: {\n    get: function get() {\n      return tree.Logical.getParentNode(this);\n    },\n    configurable: true\n  },\n\n  parentNode: {\n    get: function get$1() {\n      return tree.Logical.getParentNode(this);\n    },\n    configurable: true\n  },\n\n  nextSibling: {\n    get: function get$2() {\n      return tree.Logical.getNextSibling(this);\n    },\n    configurable: true\n  },\n\n  previousSibling: {\n    get: function get$3() {\n      return tree.Logical.getPreviousSibling(this);\n    },\n    configurable: true\n  },\n\n  nextElementSibling: {\n    get: function get$4() {\n      return tree.Logical.getNextElementSibling(this);\n    },\n    configurable: true\n  },\n\n  previousElementSibling: {\n    get: function get$5() {\n      return tree.Logical.getPreviousElementSibling(this);\n    },\n    configurable: true\n  },\n\n  assignedSlot: {\n    get: function get$6() {\n      return this._assignedSlot;\n    },\n    configurable: true\n  }\n});\n\nvar FragmentMixin = {\n\n  appendChild: function appendChild(node) {\n    return this.insertBefore(node);\n  },\n\n  // cases in which we may not be able to just do standard native call\n  // 1. container has a shadyRoot (needsDistribution IFF the shadyRoot\n  // has an insertion point)\n  // 2. container is a shadyRoot (don't distribute, instead set\n  // container to container.host.\n  // 3. node is <content> (host of container needs distribution)\n  insertBefore: function insertBefore(node, ref_node) {\n    if (ref_node && tree.Logical.getParentNode(ref_node) !== this) {\n      throw Error('The ref_node to be inserted before is not a child ' +\n        'of this node');\n    }\n    // remove node from its current position iff it's in a tree.\n    if (node.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\n      var parent = tree.Logical.getParentNode(node);\n      mixinImpl.removeNodeFromParent(node, parent);\n    }\n    if (!mixinImpl.addNode(this, node, ref_node)) {\n      if (ref_node) {\n        // if ref_node is an insertion point replace with first distributed node\n        var root = mixinImpl.ownerShadyRootForNode(ref_node);\n        if (root) {\n          ref_node = ref_node.localName === root.getInsertionPointTag() ?\n            mixinImpl.firstComposedNode(ref_node) : ref_node;\n        }\n      }\n      // if adding to a shadyRoot, add to host instead\n      var container = isShadyRoot(this) ?\n        this.host : this;\n      if (ref_node) {\n        tree.Composed.insertBefore(container, node, ref_node);\n      } else {\n        tree.Composed.appendChild(container, node);\n      }\n    }\n    mixinImpl._scheduleObserver(this, node);\n    return node;\n  },\n\n  /**\n    Removes the given `node` from the element's `lightChildren`.\n    This method also performs dom composition.\n  */\n  removeChild: function removeChild(node) {\n    if (tree.Logical.getParentNode(node) !== this) {\n      throw Error('The node to be removed is not a child of this node: ' +\n        node);\n    }\n    if (!mixinImpl.removeNode(node)) {\n      // if removing from a shadyRoot, remove form host instead\n      var container = isShadyRoot(this) ?\n        this.host :\n        this;\n      // not guaranteed to physically be in container; e.g.\n      // undistributed nodes.\n      var parent = tree.Composed.getParentNode(node);\n      if (container === parent) {\n        tree.Composed.removeChild(container, node);\n      }\n    }\n    mixinImpl._scheduleObserver(this, null, node);\n    return node;\n  },\n\n  replaceChild: function replaceChild(node, ref_node) {\n    this.insertBefore(node, ref_node);\n    this.removeChild(ref_node);\n    return node;\n  },\n\n  // TODO(sorvell): consider doing native QSA and filtering results.\n  querySelector: function querySelector(selector) {\n    // match selector and halt on first result.\n    var result = mixinImpl.query(this, function(n) {\n      return matchesSelector(n, selector);\n    }, function(n) {\n      return Boolean(n);\n    })[0];\n    return result || null;\n  },\n\n  querySelectorAll: function querySelectorAll(selector) {\n    return mixinImpl.query(this, function(n) {\n      return matchesSelector(n, selector);\n    });\n  },\n\n  cloneNode: function cloneNode(deep) {\n    if (this.localName == 'template') {\n      return nativeCloneNode.call(this, deep);\n    } else {\n      var n = nativeCloneNode.call(this, false);\n      if (deep) {\n        var c$ = this.childNodes;\n        for (var i=0, nc; i < c$.length; i++) {\n          nc = c$[i].cloneNode(true);\n          n.appendChild(nc);\n        }\n      }\n      return n;\n    }\n  },\n\n  importNode: function importNode(externalNode, deep) {\n    // for convenience use this node's ownerDoc if the node isn't a document\n    var doc = this instanceof Document ? this :\n      this.ownerDocument;\n    var n = nativeImportNode.call(doc, externalNode, false);\n    if (deep) {\n      var c$ = tree.Logical.getChildNodes(externalNode);\n      common.patchNode(n);\n      for (var i=0, nc; i < c$.length; i++) {\n        nc = doc.importNode(c$[i], true);\n        n.appendChild(nc);\n      }\n    }\n    return n;\n  }\n};\n\nObject.defineProperties(FragmentMixin, {\n\n  childNodes: {\n    get: function get$7() {\n      var c$ = tree.Logical.getChildNodes(this);\n      return Array.isArray(c$) ? c$ : tree.arrayCopyChildNodes(this);\n    },\n    configurable: true\n  },\n\n  children: {\n    get: function get$8() {\n      if (tree.Logical.hasChildNodes(this)) {\n        return Array.prototype.filter.call(this.childNodes, function(n) {\n          return (n.nodeType === Node.ELEMENT_NODE);\n        });\n      } else {\n        return tree.arrayCopyChildren(this);\n      }\n    },\n    configurable: true\n  },\n\n  firstChild: {\n    get: function get$9() {\n      return tree.Logical.getFirstChild(this);\n    },\n    configurable: true\n  },\n\n  lastChild: {\n    get: function get$10() {\n      return tree.Logical.getLastChild(this);\n    },\n    configurable: true\n  },\n\n  firstElementChild: {\n    get: function get$11() {\n      return tree.Logical.getFirstElementChild(this);\n    },\n    configurable: true\n  },\n\n  lastElementChild: {\n    get: function get$12() {\n      return tree.Logical.getLastElementChild(this);\n    },\n    configurable: true\n  },\n\n  // TODO(srovell): strictly speaking fragments do not have textContent\n  // or innerHTML but ShadowRoots do and are not easily distinguishable.\n  // textContent / innerHTML\n  textContent: {\n    get: function get$13() {\n      if (this.childNodes) {\n        var tc = [];\n        for (var i = 0, cn = this.childNodes, c; (c = cn[i]); i++) {\n          if (c.nodeType !== Node.COMMENT_NODE) {\n            tc.push(c.textContent);\n          }\n        }\n        return tc.join('');\n      }\n      return '';\n    },\n    set: function set(text) {\n      mixinImpl.clearNode(this);\n      if (text) {\n        this.appendChild(document.createTextNode(text));\n      }\n    },\n    configurable: true\n  },\n\n  innerHTML: {\n    get: function get$14() {\n      return getInnerHTML(this);\n    },\n    set: function set$1(text) {\n      var this$1 = this;\n\n      mixinImpl.clearNode(this);\n      var d = document.createElement('div');\n      d.innerHTML = text;\n      // here, appendChild may move nodes async so we cannot rely\n      // on node position when copying\n      var c$ = tree.arrayCopyChildNodes(d);\n      for (var i=0; i < c$.length; i++) {\n        this$1.appendChild(c$[i]);\n      }\n    },\n    configurable: true\n  }\n\n});\n\nvar ElementMixin = {\n\n  // TODO(sorvell): should only exist on <slot>\n  assignedNodes: function assignedNodes(options) {\n    return (options && options.flatten ? this._distributedNodes :\n      this._assignedNodes) || [];\n  },\n\n\n  setAttribute: function setAttribute$1(name, value) {\n    setAttribute.call(this, name, value);\n    mixinImpl.maybeDistributeAttributeChange(this, name);\n  },\n\n  removeAttribute: function removeAttribute(name) {\n    nativeRemoveAttribute.call(this, name);\n    mixinImpl.maybeDistributeAttributeChange(this, name);\n  }\n\n};\n\nObject.defineProperties(ElementMixin, {\n\n  shadowRoot: {\n    get: function get$15() {\n      return this.shadyRoot;\n    }\n  },\n\n  slot: {\n    get: function get$16() {\n      return this.getAttribute('slot');\n    },\n    set: function set$2(value) {\n      this.setAttribute('slot', value);\n    }\n  }\n\n});\n\nvar activeElementDescriptor = {\n  get: function get$17() {\n    return mixinImpl.activeElementForNode(this);\n  }\n}\n\nvar ActiveElementMixin = {};\nObject.defineProperties(ActiveElementMixin, {\n  activeElement: activeElementDescriptor\n});\n\nvar UnderActiveElementMixin = {};\nObject.defineProperties(UnderActiveElementMixin, {\n  _activeElement: activeElementDescriptor\n});\n\nvar Mixins = {\n\n  Node: extendAll({__patched: 'Node'}, NodeMixin),\n\n  Fragment: extendAll({__patched: 'Fragment'},\n    NodeMixin, FragmentMixin, ActiveElementMixin),\n\n  Element: extendAll({__patched: 'Element'},\n    NodeMixin, FragmentMixin, ElementMixin, ActiveElementMixin),\n\n  // Note: activeElement cannot be patched on document!\n  Document: extendAll({__patched: 'Document'},\n    NodeMixin, FragmentMixin, ElementMixin, UnderActiveElementMixin)\n\n};\n\nvar getRootNode = function(node) {\n  return mixinImpl.getRootNode(node);\n}\n\nfunction filterMutations(mutations, target) {\n  var targetRootNode = getRootNode(target);\n  return mutations.map(function(mutation) {\n    var mutationInScope = (targetRootNode === getRootNode(mutation.target));\n    if (mutationInScope && mutation.addedNodes) {\n      var nodes = Array.from(mutation.addedNodes).filter(function(n) {\n        return (targetRootNode === getRootNode(n));\n      });\n      if (nodes.length) {\n        mutation = Object.create(mutation);\n        Object.defineProperty(mutation, 'addedNodes', {\n          value: nodes,\n          configurable: true\n        });\n        return mutation;\n      }\n    } else if (mutationInScope) {\n      return mutation;\n    }\n  }).filter(function(m) { return m});\n}\n\n// const promise = Promise.resolve();\n\nvar AsyncObserver = function AsyncObserver() {\n  this._scheduled = false;\n  this.addedNodes = [];\n  this.removedNodes = [];\n  this.callbacks = new Set();\n};\n\nAsyncObserver.prototype.schedule = function schedule () {\n    var this$1 = this;\n\n  if (!this._scheduled) {\n    this._scheduled = true;\n    promish.then(function () {\n      this$1.flush();\n    });\n  }\n};\n\nAsyncObserver.prototype.flush = function flush () {\n  if (this._scheduled) {\n    this._scheduled = false;\n    var mutations = this.takeRecords();\n    if (mutations.length) {\n      this.callbacks.forEach(function(cb) {\n        cb(mutations);\n      });\n    }\n  }\n};\n\nAsyncObserver.prototype.takeRecords = function takeRecords () {\n  if (this.addedNodes.length || this.removedNodes.length) {\n    var mutations = [{\n      addedNodes: this.addedNodes,\n      removedNodes: this.removedNodes\n    }];\n    this.addedNodes = [];\n    this.removedNodes = [];\n    return mutations;\n  }\n  return [];\n};\n\nvar getComposedInnerHTML = function(node) {\n  if (common.isNodePatched(node)) {\n    return getInnerHTML(node, function(n) {\n      return tree.Composed.getChildNodes(n);\n    })\n  } else {\n    return node.innerHTML;\n  }\n}\n\nvar getComposedChildNodes$1 = function(node) {\n  return common.isNodePatched(node) ?\n    tree.Composed.getChildNodes(node) :\n    node.childNodes;\n}\n\n// TODO(sorvell): consider instead polyfilling MutationObserver\n// directly so that users do not have to fork their code.\n// Supporting the entire api may be challenging: e.g. filtering out\n// removed nodes in the wrong scope and seeing non-distributing\n// subtree child mutations.\nvar observeChildren = function(node, callback) {\n  common.patchNode(node);\n  if (!node.__dom.observer) {\n    node.__dom.observer = new AsyncObserver();\n  }\n  node.__dom.observer.callbacks.add(callback);\n  var observer = node.__dom.observer;\n  return {\n    _callback: callback,\n    _observer: observer,\n    _node: node,\n    takeRecords: function takeRecords() {\n      return observer.takeRecords()\n    }\n  };\n}\n\nvar unobserveChildren = function(handle) {\n  var observer = handle && handle._observer;\n  if (observer) {\n    observer.callbacks.delete(handle._callback);\n    if (!observer.callbacks.size) {\n      handle._node.__dom.observer = null;\n    }\n  }\n}\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Patches elements that interacts with ShadyDOM\n * such that tree traversal and mutation apis act like they would under\n * ShadowDOM.\n *\n * This import enables seemless interaction with ShadyDOM powered\n * custom elements, enabling better interoperation with 3rd party code,\n * libraries, and frameworks that use DOM tree manipulation apis.\n */\n\nvar patchedCount = 0;\n\nvar log = false;\n\nvar patchImpl = {\n\n  canPatchNode: function(node) {\n    switch (node) {\n      case document.head:\n      case document.documentElement:\n        return false;\n      default:\n        return true;\n    }\n  },\n\n  hasPrototypeDescriptors: Boolean(Object.getOwnPropertyDescriptor(\n    window.Node.prototype, 'textContent')),\n\n  patch: function(node) {\n    patchedCount++;\n    log && window.console.warn('patch node', node);\n    if (this.hasPrototypeDescriptors) {\n      patchPrototype(node, this.mixinForObject(node));\n    } else {\n      window.console.warn('Patching instance rather than prototype', node);\n      extend(node, this.mixinForObject(node));\n    }\n  },\n\n  mixinForObject: function(obj) {\n    switch (obj.nodeType) {\n      case Node.ELEMENT_NODE:\n        return Mixins.Element;\n      case Node.DOCUMENT_FRAGMENT_NODE:\n        return Mixins.Fragment;\n      case Node.DOCUMENT_NODE:\n        return Mixins.Document;\n      case Node.TEXT_NODE:\n      case Node.COMMENT_NODE:\n        return Mixins.Node;\n    }\n  },\n\n  unpatch: function(obj) {\n    if (obj.__sourceProto) {\n      obj.__proto__ = obj.__sourceProto;\n\n    }\n    // TODO(sorvell): implement unpatching for non-proto patchable browsers\n  }\n\n};\n\nfunction patchNode(node) {\n  if (!settings.inUse) {\n    return;\n  }\n  if (!isNodePatched(node) && patchImpl.canPatchNode(node)) {\n    tree.saveChildNodes(node);\n    patchImpl.patch(node);\n  }\n}\n\nfunction canUnpatchNode() {\n  return Boolean(patchImpl.hasPrototypeDescriptors);\n}\n\nfunction unpatchNode(node) {\n  patchImpl.unpatch(node);\n}\n\nfunction isNodePatched(node) {\n  return Boolean(node.__patched);\n}\n\n// TODO(sorvell): fake export\ncommon.patchNode = patchNode;\ncommon.canUnpatchNode = canUnpatchNode;\ncommon.isNodePatched = isNodePatched;\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nvar origAddEventListener = Element.prototype.addEventListener;\nvar origRemoveEventListener = Element.prototype.removeEventListener;\n\n// https://github.com/w3c/webcomponents/issues/513#issuecomment-224183937\nvar alwaysComposed = {\n  blur: true,\n  focus: true,\n  focusin: true,\n  focusout: true,\n  click: true,\n  dblclick: true,\n  mousedown: true,\n  mouseenter: true,\n  mouseleave: true,\n  mousemove: true,\n  mouseout: true,\n  mouseover: true,\n  mouseup: true,\n  wheel: true,\n  beforeinput: true,\n  input: true,\n  keydown: true,\n  keyup: true,\n  compositionstart: true,\n  compositionupdate: true,\n  compositionend: true,\n  touchstart: true,\n  touchend: true,\n  touchmove: true,\n  touchcancel: true,\n  pointerover: true,\n  pointerenter: true,\n  pointerdown: true,\n  pointermove: true,\n  pointerup: true,\n  pointercancel: true,\n  pointerout: true,\n  pointerleave: true,\n  gotpointercapture: true,\n  lostpointercapture: true,\n  dragstart: true,\n  drag: true,\n  dragenter: true,\n  dragleave: true,\n  dragover: true,\n  drop: true,\n  dragend: true,\n  DOMActivate: true,\n  DOMFocusIn: true,\n  DOMFocusOut: true,\n  keypress: true\n};\n\nfunction pathComposer(startNode, composed) {\n  var composedPath = [];\n  var current = startNode;\n  var startRoot = startNode === window ? window : startNode.getRootNode();\n  while (current) {\n    composedPath.push(current);\n    if (current.assignedSlot) {\n      current = current.assignedSlot;\n    } else if (current.nodeType === Node.DOCUMENT_FRAGMENT_NODE && current.host && (composed || current !== startRoot)) {\n      current = current.host;\n    } else {\n      current = current.parentNode;\n    }\n  }\n  // event composedPath includes window when startNode's ownerRoot is document\n  if (composedPath[composedPath.length - 1] === document) {\n    composedPath.push(window);\n  }\n  return composedPath;\n}\n\nfunction retarget(refNode, path) {\n  if (!isShadyRoot) {\n    return refNode;\n  }\n  // If ANCESTOR's root is not a shadow root or ANCESTOR's root is BASE's\n  // shadow-including inclusive ancestor, return ANCESTOR.\n  var refNodePath = pathComposer(refNode, true);\n  var p$ = path;\n  for (var i=0, ancestor, lastRoot, root, rootIdx; i < p$.length; i++) {\n    ancestor = p$[i];\n    root = ancestor === window ? window : ancestor.getRootNode();\n    if (root !== lastRoot) {\n      rootIdx = refNodePath.indexOf(root);\n      lastRoot = root;\n    }\n    if (!isShadyRoot(root) || rootIdx > -1) {\n      return ancestor;\n    }\n  }\n}\n\nvar EventMixin = {\n\n  __patched: 'Event',\n\n  get composed() {\n    if (this.isTrusted && this.__composed === undefined) {\n      this.__composed = alwaysComposed[this.type];\n    }\n    return this.__composed || false;\n  },\n\n  composedPath: function composedPath() {\n    if (!this.__composedPath) {\n      this.__composedPath = pathComposer(this.__target, this.composed);\n    }\n    return this.__composedPath;\n  },\n\n  get target() {\n    return retarget(this.currentTarget, this.composedPath());\n  },\n\n  // http://w3c.github.io/webcomponents/spec/shadow/#event-relatedtarget-retargeting\n  get relatedTarget() {\n    if (!this.__relatedTarget) {\n      return null;\n    }\n    if (!this.__relatedTargetComposedPath) {\n      this.__relatedTargetComposedPath = pathComposer(this.__relatedTarget, true);\n    }\n    // find the deepest node in relatedTarget composed path that is in the same root with the currentTarget\n    return retarget(this.currentTarget, this.__relatedTargetComposedPath);\n  },\n  stopPropagation: function stopPropagation() {\n    Event.prototype.stopPropagation.call(this);\n    this.__propagationStopped = true;\n  },\n  stopImmediatePropagation: function stopImmediatePropagation() {\n    Event.prototype.stopImmediatePropagation.call(this);\n    this.__immediatePropagationStopped = true;\n    this.__propagationStopped = true;\n  }\n\n};\n\nfunction mixinComposedFlag(Base) {\n  // NOTE: avoiding use of `class` here so that transpiled output does not\n  // try to do `Base.call` with a dom construtor.\n  var klazz = function(type, options) {\n    var event = new Base(type, options);\n    event.__composed = options && Boolean(options.composed);\n    return event;\n  }\n  // put constructor properties on subclass\n  mixin(klazz, Base);\n  klazz.prototype = Base.prototype;\n  return klazz;\n}\n\nvar nonBubblingEventsToRetarget = {\n  focus: true,\n  blur: true\n};\n\nfunction fireHandlers(event, node, phase) {\n  var hs = node.__handlers && node.__handlers[event.type] &&\n    node.__handlers[event.type][phase];\n  if (hs) {\n    for (var i = 0, fn; (fn = hs[i]); i++) {\n      fn.call(node, event);\n      if (event.__immediatePropagationStopped) {\n        return;\n      }\n    }\n  }\n}\n\nfunction retargetNonBubblingEvent(e) {\n  var path = e.composedPath();\n  var node;\n  // override `currentTarget` to let patched `target` calculate correctly\n  Object.defineProperty(e, 'currentTarget', {\n    get: function() {\n      return node;\n    },\n    configurable: true\n  });\n  for (var i = path.length - 1; i >= 0; i--) {\n    node = path[i];\n    // capture phase fires all capture handlers\n    fireHandlers(e, node, 'capture');\n    if (e.__propagationStopped) {\n      return;\n    }\n  }\n\n  // set the event phase to `AT_TARGET` as in spec\n  Object.defineProperty(e, 'eventPhase', {value: Event.AT_TARGET});\n\n  // the event only needs to be fired when owner roots change when iterating the event path\n  // keep track of the last seen owner root\n  var lastFiredRoot;\n  for (var i$1 = 0; i$1 < path.length; i$1++) {\n    node = path[i$1];\n    if (i$1 === 0 || (node.shadowRoot && node.shadowRoot === lastFiredRoot)) {\n      fireHandlers(e, node, 'bubble');\n      // don't bother with window, it doesn't have `getRootNode` and will be last in the path anyway\n      if (node !== window) {\n        lastFiredRoot = node.getRootNode();\n      }\n      if (e.__propagationStopped) {\n        return;\n      }\n    }\n  }\n}\n\nfunction addEventListener(type, fn, optionsOrCapture) {\n  var this$1 = this;\n\n  if (!fn) {\n    return;\n  }\n\n  // The callback `fn` might be used for multiple nodes/events. Since we generate\n  // a wrapper function, we need to keep track of it when we remove the listener.\n  // It's more efficient to store the node/type/options information as Array in\n  // `fn` itself rather than the node (we assume that the same callback is used\n  // for few nodes at most, whereas a node will likely have many event listeners).\n  // NOTE(valdrin) invoking external functions is costly, inline has better perf.\n  var capture, once, passive;\n  if (typeof optionsOrCapture === 'object') {\n    capture = Boolean(optionsOrCapture.capture);\n    once = Boolean(optionsOrCapture.once);\n    passive = Boolean(optionsOrCapture.passive);\n  } else {\n    capture = Boolean(optionsOrCapture);\n    once = false;\n    passive = false;\n  }\n  if (fn.__eventWrappers) {\n    // Stop if the wrapper function has already been created.\n    for (var i = 0; i < fn.__eventWrappers.length; i++) {\n      if (fn.__eventWrappers[i].node === this$1 &&\n          fn.__eventWrappers[i].type === type &&\n          fn.__eventWrappers[i].capture === capture &&\n          fn.__eventWrappers[i].once === once &&\n          fn.__eventWrappers[i].passive === passive) {\n        return;\n      }\n    }\n  } else {\n    fn.__eventWrappers = [];\n  }\n\n  var wrapperFn = function(e) {\n    // Support `once` option.\n    if (once) {\n      this.removeEventListener(type, fn, optionsOrCapture);\n    }\n    if (!e.__target) {\n      e.__target = e.target;\n      e.__relatedTarget = e.relatedTarget;\n      patchPrototype(e, EventMixin);\n    }\n    // There are two critera that should stop events from firing on this node\n    // 1. the event is not composed and the current node is not in the same root as the target\n    // 2. when bubbling, if after retargeting, relatedTarget and target point to the same node\n    if (e.composed || e.composedPath().indexOf(this) > -1) {\n      if (e.eventPhase === Event.BUBBLING_PHASE) {\n        if (e.target === e.relatedTarget) {\n          e.stopImmediatePropagation();\n          return;\n        }\n      }\n      return fn(e);\n    }\n  };\n  // Store the wrapper information.\n  fn.__eventWrappers.push({\n    node: this,\n    type: type,\n    capture: capture,\n    once: once,\n    passive: passive,\n    wrapperFn: wrapperFn\n  });\n\n  if (nonBubblingEventsToRetarget[type]) {\n    this.__handlers = this.__handlers || {};\n    this.__handlers[type] = this.__handlers[type] || {capture: [], bubble: []};\n    this.__handlers[type][capture ? 'capture' : 'bubble'].push(wrapperFn);\n  } else {\n    origAddEventListener.call(this, type, wrapperFn, optionsOrCapture);\n  }\n}\n\nfunction removeEventListener(type, fn, optionsOrCapture) {\n  var this$1 = this;\n\n  if (!fn) {\n    return;\n  }\n\n  // NOTE(valdrin) invoking external functions is costly, inline has better perf.\n  var capture, once, passive;\n  if (typeof optionsOrCapture === 'object') {\n    capture = Boolean(optionsOrCapture.capture);\n    once = Boolean(optionsOrCapture.once);\n    passive = Boolean(optionsOrCapture.passive);\n  } else {\n    capture = Boolean(optionsOrCapture);\n    once = false;\n    passive = false;\n  }\n  // Search the wrapped function.\n  var wrapperFn = undefined;\n  if (fn.__eventWrappers) {\n    for (var i = 0; i < fn.__eventWrappers.length; i++) {\n      if (fn.__eventWrappers[i].node === this$1 &&\n          fn.__eventWrappers[i].type === type &&\n          fn.__eventWrappers[i].capture === capture &&\n          fn.__eventWrappers[i].once === once &&\n          fn.__eventWrappers[i].passive === passive) {\n        wrapperFn = fn.__eventWrappers.splice(i, 1)[0].wrapperFn;\n        // Cleanup.\n        if (!fn.__eventWrappers.length) {\n          fn.__eventWrappers = undefined;\n        }\n        break;\n      }\n    }\n  }\n\n  origRemoveEventListener.call(this, type, wrapperFn || fn, optionsOrCapture);\n  if (wrapperFn && nonBubblingEventsToRetarget[type] &&\n      this.__handlers && this.__handlers[type]) {\n    var arr = this.__handlers[type][capture ? 'capture' : 'bubble'];\n    var idx = arr.indexOf(wrapperFn);\n    if (idx > -1) {\n      arr.splice(idx, 1);\n    }\n  }\n}\n\nfunction activateFocusEventOverrides() {\n  for (var ev in nonBubblingEventsToRetarget) {\n    window.addEventListener(ev, function(e) {\n      if (!e.__target) {\n        e.__target = e.target;\n        e.__relatedTarget = e.relatedTarget;\n        patchPrototype(e, EventMixin);\n        retargetNonBubblingEvent(e);\n        e.stopImmediatePropagation();\n      }\n    }, true);\n  }\n}\n\n\nvar PatchedEvent = mixinComposedFlag(Event);\nvar PatchedCustomEvent = mixinComposedFlag(CustomEvent);\nvar PatchedMouseEvent = mixinComposedFlag(MouseEvent);\n\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Patches elements that interacts with ShadyDOM\n * such that tree traversal and mutation apis act like they would under\n * ShadowDOM.\n *\n * This import enables seemless interaction with ShadyDOM powered\n * custom elements, enabling better interoperation with 3rd party code,\n * libraries, and frameworks that use DOM tree manipulation apis.\n */\n\nif (settings.inUse) {\n\n  window.ShadyDOM = {\n    tree: tree,\n    getNativeProperty: getNativeProperty,\n    patch: patchNode,\n    isPatched: isNodePatched,\n    getComposedInnerHTML: getComposedInnerHTML,\n    getComposedChildNodes: getComposedChildNodes$1,\n    unpatch: unpatchNode,\n    canUnpatch: canUnpatchNode,\n    isShadyRoot: isShadyRoot,\n    enqueue: enqueue,\n    flush: flush$1,\n    inUse: settings.inUse,\n    filterMutations: filterMutations,\n    observeChildren: observeChildren,\n    unobserveChildren: unobserveChildren\n  };\n\n  var createRootAndEnsurePatched = function(node) {\n    // TODO(sorvell): need to ensure ancestors are patched but this introduces\n    // a timing problem with gathering composed children.\n    // (1) currently the child list is crawled and patched when patching occurs\n    // (this needs to change)\n    // (2) we can only patch when an element has received its parsed children\n    // because we cannot detect them when inserted by parser.\n    // let ancestor = node;\n    // while (ancestor) {\n    //   patchNode(ancestor);\n    //   ancestor = ancestor.parentNode || ancestor.host;\n    // }\n    patchNode(node);\n    var root = new ShadyRoot(node);\n    patchNode(root);\n    return root;\n  }\n\n  Element.prototype.attachShadow = function() {\n    return createRootAndEnsurePatched(this);\n  }\n\n  Node.prototype.addEventListener = addEventListener;\n  Node.prototype.removeEventListener = removeEventListener;\n  Event = PatchedEvent;\n  CustomEvent = PatchedCustomEvent;\n  MouseEvent = PatchedMouseEvent;\n  activateFocusEventOverrides();\n\n  Object.defineProperty(Node.prototype, 'isConnected', {\n    get: function get() {\n      return document.documentElement.contains(this);\n    },\n    configurable: true\n  });\n\n  Node.prototype.getRootNode = function(options) {\n    return getRootNode(this, options);\n  }\n\n  Object.defineProperty(Element.prototype, 'slot', {\n    get: function get$1() {\n      return this.getAttribute('slot');\n    },\n    set: function set(value) {\n      this.setAttribute('slot', value);\n    },\n    configurable: true\n  });\n\n  Object.defineProperty(Node.prototype, 'assignedSlot', {\n    get: function get$2() {\n      return this._assignedSlot || null;\n    },\n    configurable: true\n  });\n\n  var nativeSetAttribute = Element.prototype.setAttribute;\n  Element.prototype.setAttribute = setAttribute;\n  // NOTE: expose native setAttribute to allow hooking native method\n  // (e.g. this is done in ShadyCSS)\n  Element.prototype.__nativeSetAttribute = nativeSetAttribute;\n\n  var classNameDescriptor = {\n    get: function get$3() {\n      return this.getAttribute('class');\n    },\n    set: function set$1(value) {\n      this.setAttribute('class', value);\n    },\n    configurable: true\n  };\n\n  // Safari 9 `className` is not configurable\n  var cn = Object.getOwnPropertyDescriptor(Element.prototype, 'className');\n  if (cn && cn.configurable) {\n    Object.defineProperty(Element.prototype, 'className', classNameDescriptor);\n  } else {\n    // on IE `className` is on Element\n    var h = window.customElements && window.customElements.nativeHTMLElement ||\n      HTMLElement;\n    cn = Object.getOwnPropertyDescriptor(h.prototype, 'className');\n    if (cn && cn.configurable) {\n      Object.defineProperty(h.prototype, 'className', classNameDescriptor);\n    }\n  }\n}\n\n}());\n\n//# sourceMappingURL=shadydom.min.js.map\n","(function(){'use strict';/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/function e(De){return De=a(De),u(d(De),De)}function a(De){return De.replace(X.comments,'').replace(X.port,'')}function d(De){let ke={start:0,end:De.length},Ue=ke;for(let Ke=0,Xe=De.length;Ke<Xe;Ke++)if(De[Ke]===U){Ue.rules||(Ue.rules=[]);let Ve=Ue,je=Ve.rules[Ve.rules.length-1];Ue={start:Ke+1,parent:Ve,previous:je},Ve.rules.push(Ue)}else De[Ke]===K&&(Ue.end=Ke+1,Ue=Ue.parent||ke);return ke}function u(De,ke){let Ue=ke.substring(De.start,De.end-1);if(De.parsedCssText=De.cssText=Ue.trim(),De.parent){let Xe=De.previous?De.previous.end:De.parent.start;Ue=ke.substring(Xe,De.start-1),Ue=y(Ue),Ue=Ue.replace(X.multipleSpaces,' '),Ue=Ue.substring(Ue.lastIndexOf(';')+1);let Ve=De.parsedSelector=De.selector=Ue.trim();De.atRule=0===Ve.indexOf('@'),De.atRule?0===Ve.indexOf('@media')?De.type=k.MEDIA_RULE:Ve.match(X.keyframesRule)&&(De.type=k.KEYFRAMES_RULE,De.keyframesName=De.selector.split(X.multipleSpaces).pop()):0===Ve.indexOf(V)?De.type=k.MIXIN_RULE:De.type=k.STYLE_RULE}let Ke=De.rules;if(Ke)for(let je,Xe=0,Ve=Ke.length;Xe<Ve&&(je=Ke[Xe]);Xe++)u(je,ke);return De}function y(De){return De.replace(/\\\\([0-9a-f]{1,6})\\s/gi,function(){let ke=arguments[1],Ue=6-ke.length;for(;Ue--;)ke='0'+ke;return'\\\\'+ke})}function _(De,ke,Ue){Ue=Ue||'';let Ke='';if(De.cssText||De.rules){let Xe=De.rules;if(Xe&&!S(Xe))for(let Be,Ve=0,je=Xe.length;Ve<je&&(Be=Xe[Ve]);Ve++)Ke=_(Be,ke,Ke);else Ke=ke?De.cssText:h(De.cssText),Ke=Ke.trim(),Ke&&(Ke='  '+Ke+'\\n')}return Ke&&(De.selector&&(Ue+=De.selector+' '+U+'\\n'),Ue+=Ke,De.selector&&(Ue+=K+'\\n\\n')),Ue}function S(De){return 0===De[0].selector.indexOf(V)}function h(De){return De=g(De),C(De)}function g(De){return De.replace(X.customProp,'').replace(X.mixinProp,'')}function C(De){return De.replace(X.mixinApply,'').replace(X.varApply,'')}function E(De){De&&(B=B&&!De.shimcssproperties,j=j&&!De.shimshadow)}function A(De,ke){return'string'==typeof De&&(De=e(De)),ke&&R(De,ke),_(De,B)}function T(De){return!De.__cssRules&&De.textContent&&(De.__cssRules=e(De.textContent)),De.__cssRules}function N(De){return De.parent&&De.parent.type===k.KEYFRAMES_RULE}function R(De,ke,Ue,Ke){if(De){let Xe=!1;if(Ke&&De.type===k.MEDIA_RULE){let je=De.selector.match(q.MEDIA_MATCH);je&&!window.matchMedia(je[1]).matches&&(Xe=!0)}De.type===k.STYLE_RULE?ke(De):Ue&&De.type===k.KEYFRAMES_RULE?Ue(De):De.type===k.MIXIN_RULE&&(Xe=!0);let Ve=De.rules;if(Ve&&!Xe)for(let Ye,je=0,Be=Ve.length;je<Be&&(Ye=Ve[je]);je++)R(Ye,ke,Ue,Ke)}}function P(De,ke,Ue,Ke){let Xe=O(De,ke);return I(Xe,Ue,Ke)}function I(De,ke,Ue){ke=ke||document.head;let Ke=Ue&&Ue.nextSibling||ke.firstChild;return G=De,ke.insertBefore(De,Ke)}function O(De,ke){let Ue=document.createElement('style');return ke&&Ue.setAttribute('scope',ke),Ue.textContent=De,Ue}function M(De){let ke=document.createComment(' Shady DOM styles for '+De+' '),Ue=G?G.nextSibling:null,Ke=document.head;return Ke.insertBefore(ke,Ue||Ke.firstChild),G=ke,ke}function b(De,ke){let Ue=0;for(let Ke=ke,Xe=De.length;Ke<Xe;Ke++)if('('===De[Ke])Ue++;else if(')'===De[Ke]&&0==--Ue)return Ke;return-1}function w(De,ke){let Ue=De.indexOf('var(');if(-1===Ue)return ke(De,'','','');let Ke=b(De,Ue+3),Xe=De.substring(Ue+4,Ke),Ve=De.substring(0,Ue),je=w(De.substring(Ke+1),ke),Be=Xe.indexOf(',');if(-1===Be)return ke(Ve,Xe.trim(),'',je);let Ye=Xe.substring(0,Be).trim(),Ge=Xe.substring(Be+1).trim();return ke(Ve,Ye,Ge,je)}function L(De,ke){De.__nativeSetAttribute?De.__nativeSetAttribute('class',ke):De.setAttribute('class',ke)}function H(De,ke){let Ue=parseInt(De/32);ke[Ue]=(ke[Ue]||0)|1<<De%32}function F(){we||(we=!0,window.HTMLImports?window.HTMLImports.whenReady(D):'complete'===document.readyState?D():document.addEventListener('readystatechange',()=>{'complete'===document.readyState&&D()}))}function D(){requestAnimationFrame(()=>{(we||be._elementsHaveApplied)&&be.updateStyles(),we=!1})}let k={STYLE_RULE:1,KEYFRAMES_RULE:7,MEDIA_RULE:4,MIXIN_RULE:1e3},U='{',K='}',X={comments:/\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,port:/@import[^;]*;/gim,customProp:/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,mixinProp:/(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,mixinApply:/@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,varApply:/[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,keyframesRule:/^@[^\\s]*keyframes/,multipleSpaces:/\\s+/g},V='--',j=!(window.ShadyDOM&&window.ShadyDOM.inUse),B=!navigator.userAgent.match('AppleWebKit/601')&&window.CSS&&CSS.supports&&CSS.supports('box-shadow','0 0 0 var(--foo)'),Y=!1;window.ShadyCSS?E(window.ShadyCSS):window.WebComponents&&E(window.WebComponents.flags);let G=null,q={VAR_ASSIGN:/(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi,MIXIN_MATCH:/(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,VAR_CONSUMED:/(--[\\w-]+)\\s*([:,;)]|$)/gi,ANIMATION_MATCH:/(animation\\s*:)|(animation-name\\s*:)/,MEDIA_MATCH:/@media[^(]*(\\([^)]*\\))/,IS_VAR:/^--/,BRACKETED:/\\{[^}]*\\}/g,HOST_PREFIX:'(?:^|[^.#[:])',HOST_SUFFIX:'($|[.:[\\\\s>+~])'};const W='style-scope';class z{get SCOPE_NAME(){return W}dom(De,ke,Ue){De.__styleScoped?De.__styleScoped=null:this._transformDom(De,ke||'',Ue)}_transformDom(De,ke,Ue){De.nodeType===Node.ELEMENT_NODE&&this.element(De,ke,Ue);let Ke='template'===De.localName?(De.content||De._content).childNodes:De.children||De.childNodes;if(Ke)for(let Xe=0;Xe<Ke.length;Xe++)this._transformDom(Ke[Xe],ke,Ue)}element(De,ke,Ue){if(ke)if(De.classList)Ue?(De.classList.remove(W),De.classList.remove(ke)):(De.classList.add(W),De.classList.add(ke));else if(De.getAttribute){let Ke=De.getAttribute('class');if(!Ue){let Xe=(Ke?Ke+' ':'')+W+' '+ke;L(De,Xe)}else if(Ke){let Xe=Ke.replace(W,'').replace(ke,'');L(De,Xe)}}}elementStyles(De,ke,Ue){let Ke=De.__cssBuild,Xe=j||'shady'===Ke?A(ke,Ue):this.css(ke,De.is,De.extends,Ue)+'\\n\\n';return Xe.trim()}css(De,ke,Ue,Ke){let Xe=this._calcHostScope(ke,Ue);ke=this._calcElementScope(ke);let Ve=this;return A(De,function(je){je.isScoped||(Ve.rule(je,ke,Xe),je.isScoped=!0),Ke&&Ke(je,ke,Xe)})}_calcElementScope(De){return De?'.'+De:''}_calcHostScope(De,ke){return ke?'[is='+De+']':De}rule(De,ke,Ue){this._transformRule(De,this._transformComplexSelector,ke,Ue)}_transformRule(De,ke,Ue,Ke){De.selector=De.transformedSelector=this._transformRuleCss(De,ke,Ue,Ke)}_transformRuleCss(De,ke,Ue,Ke){let Xe=De.selector.split(Z);if(!N(De))for(let Be,Ve=0,je=Xe.length;Ve<je&&(Be=Xe[Ve]);Ve++)Xe[Ve]=ke.call(this,Be,Ue,Ke);return Xe.join(Z)}_transformComplexSelector(De,ke,Ue){let Ke=!1;return De=De.trim(),De=De.replace($,(Xe,Ve,je)=>`:${Ve}(${je.replace(/\\s/g,'')})`),De=De.replace(re,`${te} $1`),De=De.replace(J,(Xe,Ve,je)=>{if(!Ke){let Be=this._transformCompoundSelector(je,Ve,ke,Ue);Ke=Ke||Be.stop,Ve=Be.combinator,je=Be.value}return Ve+je}),De}_transformCompoundSelector(De,ke,Ue,Ke){let Xe=De.indexOf(se);0<=De.indexOf(te)?De=this._transformHostSelector(De,Ke):0!==Xe&&(De=Ue?this._transformSimpleSelector(De,Ue):De);let Ve=!1;0<=Xe&&(ke='',Ve=!0);let je;return Ve&&(je=!0,Ve&&(De=De.replace(oe,(Be,Ye)=>` > ${Ye}`))),De=De.replace(le,(Be,Ye,Ge)=>`[dir=\"${Ge}\"] ${Ye}, ${Ye}[dir=\"${Ge}\"]`),{value:De,combinator:ke,stop:je}}_transformSimpleSelector(De,ke){let Ue=De.split(ae);return Ue[0]+=ke,Ue.join(ae)}_transformHostSelector(De,ke){let Ue=De.match(ne),Ke=Ue&&Ue[2].trim()||'';if(Ke){if(!Ke[0].match(ee)){let Xe=Ke.split(ee)[0];return Xe===ke?Ke:'should_not_match'}return De.replace(ne,function(Xe,Ve,je){return ke+je})}return De.replace(te,ke)}documentRule(De){De.selector=De.parsedSelector,this.normalizeRootSelector(De),this._transformRule(De,this._transformDocumentSelector)}normalizeRootSelector(De){':root'===De.selector&&(De.selector='html')}_transformDocumentSelector(De){return De.match(se)?this._transformComplexSelector(De,Q):this._transformSimpleSelector(De.trim(),Q)}}let $=/:(nth[-\\w]+)\\(([^)]+)\\)/,Q=`:not(.${W})`,Z=',',J=/(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g,ee=/[[.:#*]/,te=':host',se='::slotted',re=/^(::slotted)/,ne=/(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,oe=/(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/,le=/(.*):dir\\((?:(ltr|rtl))\\)/,ae=':';var ie=new z,pe={};const de=Promise.resolve();class me{static get(De){return De.__styleInfo}static set(De,ke){return De.__styleInfo=ke,ke}static invalidate(De){pe[De]&&(pe[De]._applyShimInvalid=!0)}static startValidating(De){const ke=pe[De];ke._validating||(ke._validating=!0,de.then(()=>{ke._applyShimInvalid=!1,ke._validating=!1}))}constructor(De,ke,Ue,Ke,Xe,Ve){this.styleRules=De||null,this.placeholder=ke||null,this.ownStylePropertyNames=Ue||[],this.overrideStyleProperties=null,this.elementName=Ke||'',this.cssBuild=Ve||'',this.typeExtension=Xe||'',this.styleProperties=null,this.scopeSelector=null,this.customStyle=null}}const ue=window.Element.prototype,ye=ue.matches||ue.matchesSelector||ue.mozMatchesSelector||ue.msMatchesSelector||ue.oMatchesSelector||ue.webkitMatchesSelector,_e=navigator.userAgent.match('Trident'),fe='x-scope';class Se{get XSCOPE_NAME(){return fe}decorateStyles(De){let ke=this,Ue={},Ke=[],Xe=0;R(De,function(je){ke.decorateRule(je),je.index=Xe++,ke.collectPropertiesInCssText(je.propertyInfo.cssText,Ue)},function(Be){Ke.push(Be)}),De._keyframes=Ke;let Ve=[];for(let je in Ue)Ve.push(je);return Ve}decorateRule(De){if(De.propertyInfo)return De.propertyInfo;let ke={},Ue={},Ke=this.collectProperties(De,Ue);return Ke&&(ke.properties=Ue,De.rules=null),ke.cssText=this.collectCssText(De),De.propertyInfo=ke,ke}collectProperties(De,ke){let Ue=De.propertyInfo;if(!Ue){let Ke,Xe=q.VAR_ASSIGN,Ve=De.parsedCssText,je,Be;for(;Ke=Xe.exec(Ve);)je=(Ke[2]||Ke[3]).trim(),('inherit'!==je||'unset'!==je)&&(ke[Ke[1].trim()]=je),Be=!0;return Be}else if(Ue.properties)return Object.assign(ke,Ue.properties),!0}collectCssText(De){return this.collectConsumingCssText(De.parsedCssText)}collectConsumingCssText(De){return De.replace(q.BRACKETED,'').replace(q.VAR_ASSIGN,'')}collectPropertiesInCssText(De,ke){for(let Ue;Ue=q.VAR_CONSUMED.exec(De);){let Ke=Ue[1];':'!==Ue[2]&&(ke[Ke]=!0)}}reify(De){let ke=Object.getOwnPropertyNames(De);for(let Ke,Ue=0;Ue<ke.length;Ue++)Ke=ke[Ue],De[Ke]=this.valueForProperty(De[Ke],De)}valueForProperty(De,ke){if(De)if(0<=De.indexOf(';'))De=this.valueForProperties(De,ke);else{let Ue=this;De=w(De,function(Ke,Xe,Ve,je){if(!Xe)return Ke+je;let Be=Ue.valueForProperty(ke[Xe],ke);return Be&&'initial'!==Be?'apply-shim-inherit'===Be&&(Be='inherit'):Be=Ue.valueForProperty(ke[Ve]||Ve,ke)||Ve,Ke+(Be||'')+je})}return De&&De.trim()||''}valueForProperties(De,ke){let Ue=De.split(';');for(let Xe,Ve,Ke=0;Ke<Ue.length;Ke++)if(Xe=Ue[Ke]){if(q.MIXIN_MATCH.lastIndex=0,Ve=q.MIXIN_MATCH.exec(Xe),Ve)Xe=this.valueForProperty(ke[Ve[1]],ke);else{let je=Xe.indexOf(':');if(-1!==je){let Be=Xe.substring(je);Be=Be.trim(),Be=this.valueForProperty(Be,ke)||Be,Xe=Xe.substring(0,je)+Be}}Ue[Ke]=Xe&&Xe.lastIndexOf(';')===Xe.length-1?Xe.slice(0,-1):Xe||''}return Ue.join(';')}applyProperties(De,ke){let Ue='';De.propertyInfo||this.decorateRule(De),De.propertyInfo.cssText&&(Ue=this.valueForProperties(De.propertyInfo.cssText,ke)),De.cssText=Ue}applyKeyframeTransforms(De,ke){let Ue=De.cssText,Ke=De.cssText;if(null==De.hasAnimations&&(De.hasAnimations=q.ANIMATION_MATCH.test(Ue)),De.hasAnimations){let Xe;if(null==De.keyframeNamesToTransform)for(let Ve in De.keyframeNamesToTransform=[],ke)Xe=ke[Ve],Ke=Xe(Ue),Ue!==Ke&&(Ue=Ke,De.keyframeNamesToTransform.push(Ve));else{for(let Ve=0;Ve<De.keyframeNamesToTransform.length;++Ve)Xe=ke[De.keyframeNamesToTransform[Ve]],Ue=Xe(Ue);Ke=Ue}}De.cssText=Ke}propertyDataFromStyles(De,ke){let Ue={},Ke=this,Xe=[];return R(De,function(Ve){Ve.propertyInfo||Ke.decorateRule(Ve);let je=Ve.transformedSelector||Ve.parsedSelector;ke&&Ve.propertyInfo.properties&&je&&ye.call(ke,je)&&(Ke.collectProperties(Ve,Ue),H(Ve.index,Xe))},null,!0),{properties:Ue,key:Xe}}whenHostOrRootRule(De,ke,Ue,Ke){if(ke.propertyInfo||this.decorateRule(ke),!!ke.propertyInfo.properties){let Xe=De.is?ie._calcHostScope(De.is,De.extends):'html',Ve=ke.parsedSelector,je=':host > *'===Ve||'html'===Ve,Be=0===Ve.indexOf(':host')&&!je;if('shady'===Ue&&(je=Ve===Xe+' > *.'+Xe||-1!==Ve.indexOf('html'),Be=!je&&0===Ve.indexOf(Xe)),'shadow'===Ue&&(je=':host > *'===Ve||'html'===Ve,Be=Be&&!je),je||Be){let Ye=Xe;Be&&(j&&!ke.transformedSelector&&(ke.transformedSelector=ie._transformRuleCss(ke,ie._transformComplexSelector,ie._calcElementScope(De.is),Xe)),Ye=ke.transformedSelector||Xe),Ke({selector:Ye,isHost:Be,isRoot:je})}}}hostAndRootPropertiesForScope(De,ke){let Ue={},Ke={},Xe=this,Ve=ke&&ke.__cssBuild;return R(ke,function(je){Xe.whenHostOrRootRule(De,je,Ve,function(Be){let Ye=De._element||De;ye.call(Ye,Be.selector)&&(Be.isHost?Xe.collectProperties(je,Ue):Xe.collectProperties(je,Ke))})},null,!0),{rootProps:Ke,hostProps:Ue}}transformStyles(De,ke,Ue){let Ke=this,Xe=ie._calcHostScope(De.is,De.extends),Ve=De.extends?'\\\\'+Xe.slice(0,-1)+'\\\\]':Xe,je=new RegExp(q.HOST_PREFIX+Ve+q.HOST_SUFFIX),Be=me.get(De).styleRules,Ye=this._elementKeyframeTransforms(De,Be,Ue);return ie.elementStyles(De,Be,function(Ge){Ke.applyProperties(Ge,ke),j||N(Ge)||!Ge.cssText||(Ke.applyKeyframeTransforms(Ge,Ye),Ke._scopeSelector(Ge,je,Xe,Ue))})}_elementKeyframeTransforms(De,ke,Ue){let Ke=ke._keyframes,Xe={};if(!j&&Ke)for(let Ve=0,je=Ke[Ve];Ve<Ke.length;je=Ke[++Ve])this._scopeKeyframes(je,Ue),Xe[je.keyframesName]=this._keyframesRuleTransformer(je);return Xe}_keyframesRuleTransformer(De){return function(ke){return ke.replace(De.keyframesNameRx,De.transformedKeyframesName)}}_scopeKeyframes(De,ke){De.keyframesNameRx=new RegExp(De.keyframesName,'g'),De.transformedKeyframesName=De.keyframesName+'-'+ke,De.transformedSelector=De.transformedSelector||De.selector,De.selector=De.transformedSelector.replace(De.keyframesName,De.transformedKeyframesName)}_scopeSelector(De,ke,Ue,Ke){De.transformedSelector=De.transformedSelector||De.selector;let Xe=De.transformedSelector,Ve='.'+Ke,je=Xe.split(',');for(let Ge,Be=0,Ye=je.length;Be<Ye&&(Ge=je[Be]);Be++)je[Be]=Ge.match(ke)?Ge.replace(Ue,Ve):Ve+' '+Ge;De.selector=je.join(',')}applyElementScopeSelector(De,ke,Ue){let Ke=De.getAttribute('class')||'',Xe=Ke;Ue&&(Xe=Ke.replace(new RegExp('\\\\s*'+fe+'\\\\s*'+Ue+'\\\\s*','g'),' ')),Xe+=(Xe?' ':'')+fe+' '+ke,Ke!==Xe&&(De.__nativeSetAttribute?De.__nativeSetAttribute('class',Xe):De.setAttribute('class',Xe))}applyElementStyle(De,ke,Ue,Ke){let Xe=Ke?Ke.textContent||'':this.transformStyles(De,ke,Ue),Ve=me.get(De),je=Ve.customStyle;return je&&!j&&je!==Ke&&(je._useCount--,0>=je._useCount&&je.parentNode&&je.parentNode.removeChild(je)),j?Ve.customStyle?(Ve.customStyle.textContent=Xe,Ke=Ve.customStyle):Xe&&(Ke=P(Xe,Ue,De.shadowRoot,Ve.placeholder)):Ke?!Ke.parentNode&&I(Ke,null,Ve.placeholder):Xe&&(Ke=P(Xe,Ue,null,Ve.placeholder)),Ke&&(Ke._useCount=Ke._useCount||0,Ve.customStyle!=Ke&&Ke._useCount++,Ve.customStyle=Ke),_e&&(Ke.textContent=Ke.textContent),Ke}applyCustomStyle(De,ke){let Ue=T(De),Ke=this;De.textContent=A(Ue,function(Xe){let Ve=Xe.cssText=Xe.parsedCssText;Xe.propertyInfo&&Xe.propertyInfo.cssText&&(Ve=g(Ve),Xe.cssText=Ke.valueForProperties(Ve,ke))})}}var he=new Se;let ge={};const xe=window.customElements;if(xe&&!j){const De=xe.define;xe.define=function(ke,Ue,Ke){return ge[ke]=M(ke),De.call(xe,ke,Ue,Ke)}}let Ce=q.MIXIN_MATCH,Ee=q.VAR_ASSIGN,Ae=/;\\s*/m,Te=/^\\s*(initial)|(inherit)\\s*$/,Ne='_-_';class ve{constructor(){this._map={}}set(De,ke){De=De.trim(),this._map[De]={properties:ke,dependants:{}}}get(De){return De=De.trim(),this._map[De]}}class Re{constructor(){this._currentTemplate=null,this._measureElement=null,this._map=new ve,this._separator=Ne,this._boundProduceCssProperties=(De,ke,Ue,Ke)=>this._produceCssProperties(De,ke,Ue,Ke)}detectMixin(De){const ke=Ce.test(De)||Ee.test(De);return Ce.lastIndex=0,Ee.lastIndex=0,ke}transformStyle(De,ke){let Ue=T(De);return this.transformRules(Ue,ke),Ue}transformRules(De,ke){this._currentTemplate=pe[ke],R(De,Ue=>{this.transformRule(Ue)}),this._currentTemplate=null}transformRule(De){De.cssText=this.transformCssText(De.parsedCssText),':root'===De.selector&&(De.selector=':host > *')}transformCssText(De){return De=De.replace(Ee,this._boundProduceCssProperties),this._consumeCssProperties(De)}_getInitialValueForProperty(De){return this._measureElement||(this._measureElement=document.createElement('meta'),this._measureElement.style.all='initial',document.head.appendChild(this._measureElement)),window.getComputedStyle(this._measureElement).getPropertyValue(De)}_consumeCssProperties(De){for(let ke;ke=Ce.exec(De);){let Ue=ke[0],Ke=ke[1],Xe=ke.index,Ve=Xe+Ue.indexOf('@apply'),je=Xe+Ue.length,Be=De.slice(0,Ve),Ye=De.slice(je),Ge=this._cssTextToMap(Be),qe=this._atApplyToCssProperties(Ke,Ge);De=[Be,qe,Ye].join(''),Ce.lastIndex=Xe+qe.length}return De}_atApplyToCssProperties(De,ke){De=De.replace(Ae,'');let Ue=[],Ke=this._map.get(De);if(Ke||(this._map.set(De,{}),Ke=this._map.get(De)),Ke){this._currentTemplate&&(Ke.dependants[this._currentTemplate.name]=this._currentTemplate);let Xe,Ve,je;for(Xe in Ke.properties)je=ke&&ke[Xe],Ve=[Xe,': var(',De,Ne,Xe],je&&Ve.push(',',je),Ve.push(')'),Ue.push(Ve.join(''))}return Ue.join('; ')}_replaceInitialOrInherit(De,ke){let Ue=Te.exec(ke);return Ue&&(Ue[1]?ke=Re._getInitialValueForProperty(De):ke='apply-shim-inherit'),ke}_cssTextToMap(De){let ke=De.split(';'),Ue,Ke,Xe={};for(let je,Be,Ve=0;Ve<ke.length;Ve++)je=ke[Ve],je&&(Be=je.split(':'),1<Be.length&&(Ue=Be[0].trim(),Ke=this._replaceInitialOrInherit(Ue,Be.slice(1).join(':')),Xe[Ue]=Ke));return Xe}_invalidateMixinEntry(De){for(let ke in De.dependants)this._currentTemplate&&ke===this._currentTemplate.name||me.invalidate(ke)}_produceCssProperties(De,ke,Ue,Ke){if(Ue&&w(Ue,(Qe,Ze)=>{Ze&&this._map.get(Ze)&&(Ke='@apply '+Ze+';')}),!Ke)return De;let Xe=this._consumeCssProperties(Ke),Ve=De.slice(0,De.indexOf('--')),je=this._cssTextToMap(Xe),Be=je,Ye=this._map.get(ke),Ge=Ye&&Ye.properties;Ge?Be=Object.assign(Object.create(Ge),je):this._map.set(ke,Be);let We,ze,qe=[],$e=!1;for(We in Be)ze=je[We],void 0==ze&&(ze='initial'),Ge&&!(We in Ge)&&($e=!0),qe.push(ke+Ne+We+': '+ze);return $e&&this._invalidateMixinEntry(Ye),Ye&&(Ye.properties=Be),Ue&&(Ve=De+';'+Ve),Ve+qe.join('; ')+';'}}let Pe=new Re;window.ApplyShim=Pe;let Ie=function(){};if(!j){let De=Ve=>{return Ve.classList&&!Ve.classList.contains(ie.SCOPE_NAME)||Ve instanceof SVGElement&&(!Ve.hasAttribute('class')||0>Ve.getAttribute('class').indexOf(ie.SCOPE_NAME))},ke=Ve=>{for(let je=0;je<Ve.length;je++){let Be=Ve[je];if(Be.target!==document.documentElement&&Be.target!==document.head){for(let Ye=0;Ye<Be.addedNodes.length;Ye++){let Ge=Be.addedNodes[Ye];if(De(Ge)){let qe=Ge.getRootNode();if(qe.nodeType===Node.DOCUMENT_FRAGMENT_NODE){let We=qe.host;if(We){let ze=We.is||We.localName;ie.dom(Ge,ze)}}}}for(let Ye=0;Ye<Be.removedNodes.length;Ye++){let Ge=Be.removedNodes[Ye];if(Ge.nodeType===Node.ELEMENT_NODE){let qe;if(Ge.classList?qe=Array.from(Ge.classList):Ge.hasAttribute('class')&&(qe=Ge.getAttribute('class').split(/\\s+/)),void 0!=qe){let We=qe.indexOf(ie.SCOPE_NAME);if(0<=We){let ze=qe[We+1];ze&&ie.dom(Ge,ze,!0)}}}}}}},Ue=new MutationObserver(ke),Ke=Ve=>{Ue.observe(Ve,{childList:!0,subtree:!0})},Xe=window.customElements&&!window.customElements.flush;if(Xe)Ke(document);else{let Ve=()=>{Ke(document.body)};window.HTMLImports?window.HTMLImports.whenReady(Ve):requestAnimationFrame(function(){if('loading'===document.readyState){let je=function(){Ve(),document.removeEventListener('readystatechange',je)};document.addEventListener('readystatechange',je)}else Ve()})}Ie=function(){ke(Ue.takeRecords())}}let Oe=new class{constructor(ke=100){this.cache={},this.typeMax=ke}_validate(ke,Ue,Ke){for(let Xe=0;Xe<Ke.length;Xe++){let Ve=Ke[Xe];if(ke.properties[Ve]!==Ue[Ve])return!1}return!0}store(ke,Ue,Ke,Xe){let Ve=this.cache[ke]||[];Ve.push({properties:Ue,styleElement:Ke,scopeSelector:Xe}),Ve.length>this.typeMax&&Ve.shift(),this.cache[ke]=Ve}fetch(ke,Ue,Ke){let Xe=this.cache[ke];if(Xe)for(let Ve=Xe.length-1;0<=Ve;Ve--){let je=Xe[Ve];if(this._validate(je,Ue,Ke))return je}}};class Me{constructor(){this._scopeCounter={},this._documentOwner=document.documentElement,this._documentOwnerStyleInfo=me.set(document.documentElement,new me({rules:[]})),this._elementsHaveApplied=!1}get nativeShadow(){return j}get nativeCss(){return B}get nativeCssApply(){return Y}flush(){Ie()}_generateScopeSelector(De){let ke=this._scopeCounter[De]=(this._scopeCounter[De]||0)+1;return`${De}-${ke}`}getStyleAst(De){return T(De)}styleAstToString(De){return A(De)}_gatherStyles(De){let ke=De.content.querySelectorAll('style'),Ue=[];for(let Ke=0;Ke<ke.length;Ke++){let Xe=ke[Ke];Ue.push(Xe.textContent),Xe.parentNode.removeChild(Xe)}return Ue.join('').trim()}_getCssBuild(De){let ke=De.content.querySelector('style');return ke?ke.getAttribute('css-build')||'':''}prepareTemplate(De,ke,Ue){if(!De._prepared){De._prepared=!0,De.name=ke,De.extends=Ue,pe[ke]=De;let Ke=this._getCssBuild(De),Xe=this._gatherStyles(De),Ve={is:ke,extends:Ue,__cssBuild:Ke};this.nativeShadow||ie.dom(De.content,ke);let je=Pe.detectMixin(Xe),Be=e(Xe);je&&this.nativeCss&&!this.nativeCssApply&&Pe.transformRules(Be,ke),De._styleAst=Be;let Ye=[];if(this.nativeCss||(Ye=he.decorateStyles(De._styleAst,Ve)),!Ye.length||this.nativeCss){let Ge=this.nativeShadow?De.content:null,qe=ge[ke],We=this._generateStaticStyle(Ve,De._styleAst,Ge,qe);De._style=We}De._ownPropertyNames=Ye}}_generateStaticStyle(De,ke,Ue,Ke){let Xe=ie.elementStyles(De,ke);if(Xe.length)return P(Xe,De.is,Ue,Ke)}_prepareHost(De){let Ue,ke=De.getAttribute('is')||De.localName;ke!==De.localName&&(Ue=De.localName);let Ve,je,Be,Ke=ge[ke],Xe=pe[ke];return Xe&&(Ve=Xe._styleAst,je=Xe._ownPropertyNames,Be=Xe._cssBuild),me.set(De,new me(Ve,Ke,je,ke,Ue,Be))}applyStyle(De,ke){let Ue=De.getAttribute('is')||De.localName,Ke=me.get(De),Xe=!!Ke;if(Ke||(Ke=this._prepareHost(De)),this._isRootOwner(De)||(this._elementsHaveApplied=!0),window.CustomStyle){let Ve=window.CustomStyle;if(Ve._documentDirty){if(Ve.findStyles(),this.nativeCss?!this.nativeCssApply&&Ve._revalidateApplyShim():this._updateProperties(this._documentOwner,this._documentOwnerStyleInfo),Ve.applyStyles(),!this._elementsHaveApplied)return;if(!this.nativeCss&&(this.updateStyles(),Xe))return}}if(ke&&(Ke.overrideStyleProperties=Ke.overrideStyleProperties||{},Object.assign(Ke.overrideStyleProperties,ke)),this.nativeCss){Ke.overrideStyleProperties&&this._updateNativeProperties(De,Ke.overrideStyleProperties);let Ve=pe[Ue];if(!Ve&&!this._isRootOwner(De))return;if(Ve&&Ve._applyShimInvalid&&Ve._style){if(Ve._validating||(Pe.transformRules(Ve._styleAst,Ue),Ve._style.textContent=ie.elementStyles(De,Ke.styleRules),me.startValidating(Ue)),this.nativeShadow){let je=De.shadowRoot;if(je){let Be=je.querySelector('style');Be.textContent=ie.elementStyles(De,Ke.styleRules)}}Ke.styleRules=Ve._styleAst}}else this._updateProperties(De,Ke),Ke.ownStylePropertyNames&&Ke.ownStylePropertyNames.length&&this._applyStyleProperties(De,Ke);if(Xe){let Ve=this._isRootOwner(De)?De:De.shadowRoot;Ve&&this._applyToDescendants(Ve)}}_applyToDescendants(De){let ke=De.children;for(let Ke,Ue=0;Ue<ke.length;Ue++)Ke=ke[Ue],Ke.shadowRoot&&this.applyStyle(Ke),this._applyToDescendants(Ke)}_styleOwnerForNode(De){let ke=De.getRootNode(),Ue=ke.host;return Ue?me.get(Ue)?Ue:this._styleOwnerForNode(Ue):this._documentOwner}_isRootOwner(De){return De===this._documentOwner}_applyStyleProperties(De,ke){let Ue=De.getAttribute('is')||De.localName,Ke=Oe.fetch(Ue,ke.styleProperties,ke.ownStylePropertyNames),Xe=Ke&&Ke.scopeSelector,Ve=Ke?Ke.styleElement:null,je=ke.scopeSelector;ke.scopeSelector=Xe||this._generateScopeSelector(Ue);let Be=he.applyElementStyle(De,ke.styleProperties,ke.scopeSelector,Ve);return this.nativeShadow||he.applyElementScopeSelector(De,ke.scopeSelector,je),Ke||Oe.store(Ue,ke.styleProperties,Be,ke.scopeSelector),Be}_updateProperties(De,ke){let Ue=this._styleOwnerForNode(De),Ke=me.get(Ue),Xe=Ke.styleProperties,Ve=Object.create(Xe||null),je=he.hostAndRootPropertiesForScope(De,ke.styleRules),Be=he.propertyDataFromStyles(Ke.styleRules,De),Ye=Be.properties;Object.assign(Ve,je.hostProps,Ye,je.rootProps),this._mixinOverrideStyles(Ve,ke.overrideStyleProperties),he.reify(Ve),ke.styleProperties=Ve}_mixinOverrideStyles(De,ke){for(let Ue in ke){let Ke=ke[Ue];(Ke||0===Ke)&&(De[Ue]=Ke)}}_updateNativeProperties(De,ke){for(let Ue in ke)null===Ue?De.style.removeProperty(Ue):De.style.setProperty(Ue,ke[Ue])}updateStyles(De){this.applyStyle(this._documentOwner,De)}_transformCustomStyleForDocument(De){let ke=T(De);R(ke,Ue=>{j?ie.normalizeRootSelector(Ue):ie.documentRule(Ue),this.nativeCss&&!this.nativeCssApply&&Pe.transformRule(Ue)}),this.nativeCss?De.textContent=A(ke):this._documentOwnerStyleInfo.styleRules.rules.push(ke)}_revalidateApplyShim(De){if(this.nativeCss&&!this.nativeCssApply){let ke=T(De);Pe.transformRules(ke),De.textContent=A(ke)}}_applyCustomStyleToDocument(De){this.nativeCss||he.applyCustomStyle(De,this._documentOwnerStyleInfo.styleProperties)}getComputedStyleValue(De,ke){let Ue;if(!this.nativeCss){let Ke=me.get(De)||me.get(this._styleOwnerForNode(De));Ue=Ke.styleProperties[ke]}return Ue=Ue||window.getComputedStyle(De).getPropertyValue(ke),Ue.trim()}setElementClass(De,ke){let Ue=De.getRootNode(),Ke=ke?ke.split(/\\s/):[],Xe=Ue.host&&Ue.host.localName;if(!Xe){var Ve=De.getAttribute('class');if(Ve){let je=Ve.split(/\\s/);for(let Be=0;Be<je.length;Be++)if(je[Be]===ie.SCOPE_NAME){Xe=je[Be+1];break}}}if(Xe&&Ke.push(ie.SCOPE_NAME,Xe),!this.nativeCss){let je=me.get(De);je&&je.scopeSelector&&Ke.push(he.XSCOPE_NAME,je.scopeSelector)}L(De,Ke.join(' '))}_styleInfoForNode(De){return me.get(De)}}window.ShadyCSS=new Me;let be=window.ShadyCSS,we=!1,Le=[],He=null;class Fe extends HTMLElement{static get _customStyles(){return Le}static get processHook(){return He}static set processHook(De){He=De}static get _documentDirty(){return we}static findStyles(){for(let De=0;De<Le.length;De++){let ke=Le[De];if(!ke._style){let Ue=ke.querySelector('style');if(!Ue)continue;if(Ue.__appliedElement)for(let Ke=0;Ke<Ue.attributes.length;Ke++){let Xe=Ue.attributes[Ke];Ue.__appliedElement.setAttribute(Xe.name,Xe.value)}ke._style=Ue.__appliedElement||Ue,He&&He(ke._style),be._transformCustomStyleForDocument(ke._style)}}}static _revalidateApplyShim(){for(let De=0;De<Le.length;De++){let ke=Le[De];ke._style&&be._revalidateApplyShim(ke._style)}}static applyStyles(){for(let De=0;De<Le.length;De++){let ke=Le[De];ke._style&&be._applyCustomStyleToDocument(ke._style)}we=!1}constructor(){super(),Le.push(this),F()}}window.CustomStyle=Fe,window.customElements.define('custom-style',Fe)})();\n//# sourceMappingURL=shadycss.min.js.map\n"]}